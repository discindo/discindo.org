<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Discindo</title>
<link>https://discindo.org/</link>
<atom:link href="https://discindo.org/index.xml" rel="self" type="application/rss+xml"/>
<description>Data science and data engineering solutions with R and Shiny in the cloud.</description>
<generator>quarto-1.6.36</generator>
<lastBuildDate>Wed, 16 Oct 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>r2lambda update to support multi-file projects and renv projects</title>
  <dc:creator>Teo </dc:creator>
  <link>https://discindo.org/posts/r2lambda/2024-10-17-r2lambda-renv/</link>
  <description><![CDATA[ 





<section id="deploy-a-project-with-multiple-r-scripts-and-renv-managed-environment-to-aws-lambda" class="level2">
<h2 class="anchored" data-anchor-id="deploy-a-project-with-multiple-r-scripts-and-renv-managed-environment-to-aws-lambda">Deploy a project with multiple R scripts and <code>{renv}</code>-managed environment to AWS Lambda</h2>
<p>It has been a while since I’ve had the chance to work on my <code>{r2lambda}</code> project. In particular, there were a couple of good points made by a user on GitHub about functionality that is missing from the package. The option to deploy multiple files, e.g., one runtime function that depends on helpers in the same project organized in different files. And another, to enable <code>{renv}</code> management of the <code>R</code> environment within the AWS Lambda docker image. Both excellent points that I wished I addressed earlier. But better late than never.</p>
<p>Both of these features required minor adjustments to the codebase. Copying additional supports scripts and restoring the <code>{renv}</code> environment should both happen when the AWS Lambda docker image is built, so the logic to create the Dockerfile needed to be updated. Accordinly, the <code>r2lambda::build_lambda</code> function now has two additional arguments:</p>
<pre><code>#' @param support_path path to the support files (if any). Either NULL 
#' (the default) if all needed code is in the same `runtime_path` script, or a 
#' character vector of paths to additional files needed by the runtime script.
#' @param renvlock_path path to the renv.lock file (if any). Default is NULL.
#' 
#' @details Use either `renvlock_path` or `dependencies` to install required
#' packages, not both. By default, both are `NULL`, so the Docker image will
#' have no additional packages installed.</code></pre>
<p>To include any support scripts, provide a character vector script paths to the <code>support_path</code> argument when building the Lambda docker image locally with <code>build_lamdba</code>.</p>
<p>[Note that, multi-file project was supported previously as well, although perhaps not explicitly. An approach that I like is to create an ‘R’ package that exports the runtime function needed for the Lambda. Then one just needs to make that custom <code>R</code> package a dependency of the project and either install in the AWS Lambda docker image it through <code>dependencies</code> or <code>renvlock_path</code>.]</p>
<p>To use an existing <code>renv.lock</code> for installation of dependencies, provide its path to the <code>renvlock_path</code> argument to <code>build_lambda</code>. This instructs the code to copy the <code>renv.lock</code> file to the image and run <code>renv::restore()</code> which will reconstruct the <code>R</code> environment inside the docker image. I really like this feature, as it minimizes the size of the Dockefile and removes some potential headaches with R package dependencies from different repositories (CRAN, BioConductor, GitHub, etc).</p>
</section>
<section id="demo-code" class="level2">
<h2 class="anchored" data-anchor-id="demo-code">Demo code</h2>
<p>Assuming we have a folder with the following structure:</p>
<pre><code>~/Desktop$ ls -1 iris-lambda/
renv/
renv.lock
runtime.r
support.r
test-code.r</code></pre>
<p>Where, <code>support.r</code> defines some function that <code>runtime.r</code> uses for the Lambda:</p>
<pre><code>get_iris_summary_by_species &lt;- function(species) {
    iris |&gt;
    dplyr::filter(Species == species) |&gt;
    dplyr::summarise(
      mean = mean(Sepal.Length),
      sd = sd(Sepal.Length)
    )
}</code></pre>
<p>Then <code>runtime.r</code>, sources the support script, and calls the function defined there:</p>
<pre><code>source("support.r")

iris_summary &lt;- function(species) {
  get_iris_summary_by_species(species)
}

lambdr::start_lambda()</code></pre>
<p>Then the following should work, passing the support script and renv.lock to r2lambda::build_lambda:</p>
<pre><code>dir("~/Desktop/iris-lambda")
runtime_function &lt;- "iris_summary"
runtime_path &lt;- "~/Desktop/iris-lambda/runtime.r"
support_path &lt;- "~/Desktop/iris-lambda/support.r"
renvlock_path &lt;- "~/Desktop/iris-lambda/renv.lock"
dependencies &lt;- NULL

# Might take a while, its building a docker image
build_lambda(
  tag = "my_iris_lambda",
  runtime_function = runtime_function,
  runtime_path = runtime_path,
  support_path = support_path,
  renvlock_path = renvlock_path,
  dependencies = dependencies
)

# test
payload &lt;- list(species = "setosa")
tag &lt;- "my_iris_lambda"
test_lambda(tag = tag, payload)


# deploy

# Might take a while, its pushing it to a remote repository
deploy_lambda(
  tag = "my_iris_lambda",
  Timeout = 30
)

invoke_lambda(
  function_name = "my_iris_lambda",
  invocation_type = "RequestResponse",
  payload = list(species = "versicolor"),
  include_logs = FALSE
)

invoke_lambda(
  function_name = "my_iris_lambda",
  invocation_type = "RequestResponse",
  payload = list(species = "setosa"),
  include_logs = FALSE
)</code></pre>


</section>

 ]]></description>
  <category>AWS</category>
  <category>R</category>
  <guid>https://discindo.org/posts/r2lambda/2024-10-17-r2lambda-renv/</guid>
  <pubDate>Wed, 16 Oct 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Noting the differences in deploying R vs Python apps on Posit Connect</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2024-09-29-noting-the-differences-in-deploying-r-vs-python-apps-on-posit-connect/</link>
  <description><![CDATA[ 





<p>I ended my previous post <a href="../../post/using-uv-to-manage-the-environment-for-a-python-shiny-app-and-set-up-a-workflow-to-publish-it-to-posit-connect/">Using uv to manage the environment for a Python Shiny app and setting up a GitHub action to publish it to Posit Connect</a> with:</p>
<blockquote class="blockquote">
<p>Posit Connect can only listen to branches, so the idea is to have a deploy branch which Connect publishes, but which is managed by GitHub actions.</p>
</blockquote>
<p>It seems this is not correct.</p>
<section id="the-python-deployment" class="level2">
<h2 class="anchored" data-anchor-id="the-python-deployment">The Python deployment</h2>
<p>Initially I was looking to publish a Python Shiny app, and indeed the <code>rsconnect-python</code> package seems to be able only to deploy new content even when there are no changes to the <code>manifest.json</code> file.</p>
<p>Below you can see that there are two <code>pyshinywikidata</code> deployments, but it is the same app. It is just what happens when I run the pipeline twice.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/posts/2024-09-29-noting-the-differences-in-deploying-r-vs-python-apps-on-posit-connect/images/Screenshot_20240928_212347.png" class="img-fluid figure-img"></p>
<figcaption>Posit Connect content</figcaption>
</figure>
</div>
<p>In other words, it seems that the command:</p>
<pre><code>uvx --from rsconnect-python rsconnect deploy manifest --server=$CONNECT_SERVER --api-key=$CONNECT_API_KEY  manifest.json</code></pre>
<p>does not recognize that there is already an existing content with the same manifest file on the server.</p>
</section>
<section id="the-r-deployment" class="level2">
<h2 class="anchored" data-anchor-id="the-r-deployment">The R deployment</h2>
<p>However, this is not the case with deploying an R Shiny app. In particular, this seems not to be the case when deploying an R Shiny app using the <a href="https://solutions.posit.co/operations/deploy-methods/ci-cd/github-actions/">RStudio actions</a> provided by Posit. This one is focused on R and doesn’t show in Google searches when looking to deploy a Python app.</p>
<p>Using this action in a workflow makes it possible to update existing deployments, which is great.</p>
<p>However, the R way of doing things has some other strange quirks, most notably that the <code>renv.lock</code> file should be kept updated in the repository as well. This complicates things a bit when the app that needs to be deployed is written with <code>{golem}</code>.</p>
<p>In this case, <code>renv.init()</code> does not know that the app needs to be installed in the deployment too, in order to be loaded. And, that additional packages are required as well. Therefore, adding these dependencies has to happen manually with <code>renv::record()</code>. Besides the packaged app, four more packages need to be added with <code>renv.record()</code>: <code>pkgload</code>, <code>pkgbuild</code>, <code>desc</code>, and <code>procesx</code>.</p>
<p>This complicates matters a bit, because it is another manual step that can be easily forgotten, and in that case the deployment will fail.</p>
<p>This is because, as <a href="https://rstudio.github.io/renv/articles/faq.html">the renv FAQ explains</a>:</p>
<blockquote class="blockquote">
<p>For a package to be recorded in the lockfile, it must be both: 1. Installed your project library, and 2. Used by the project, as determined by renv::dependencies().</p>
</blockquote>
<p>Altering the <code>renv</code> settings may be the best approach as <a href="https://rstudio.github.io/renv/articles/faq.html#capturing-explicit-dependencies">described in the FAQ too</a>.</p>
</section>
<section id="the-python-deployment-again" class="level2">
<h2 class="anchored" data-anchor-id="the-python-deployment-again">The Python deployment, again</h2>
<p>But, if the action exists, can it be used for Python apps as well?</p>
<p>The answer to that is yes.</p>
<p>Digging through the repository for <a href="https://github.com/rstudio/actions">RStudio actions</a>, and the <a href="https://github.com/rstudio/rsconnect-ts">TypeScript client library for the Posit Connect API</a> I found out that the good people at Posit have written tests for deploying a Flask app (which is Python!). So if it works for Flask it will work for Shiny, and indeed it does.</p>
<p>It seems to me that <code>rsconnect-ts</code> offers a bit more flexibility than <code>rsconnect-python</code>. As far as I can tell, I cannot use <code>rsconnect-python</code> to check if content already exists. At the same time, it seems the <code>rsconnect-ts</code>, still being a beta-quality package, is not really being advertised, or maybe not even been work on actively.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this article I tried to clarify some of my confusion regarding using GitHub Actions to deploy R and Python Shiny apps, and probably I added a bit of new confusion as well. I will try to keep this series updated as I learn new things or better ways to achieve gh-actions deployments. I would also appreciate suggestions for other relevant content if anyone has found something I have missed.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Python</category>
  <category>Automation</category>
  <guid>https://discindo.org/posts/2024-09-29-noting-the-differences-in-deploying-r-vs-python-apps-on-posit-connect/</guid>
  <pubDate>Sat, 28 Sep 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Using uv to manage the environment for a Python Shiny app and setting up a GitHub action to publish it to Posit Connect</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2024-09-21-using-uv-to-manage-the-environment-for-a-python-shiny-app-and-set-up-a-workflow-to-publish-it-to-posit-connect/</link>
  <description><![CDATA[ 





<section id="it-all-starts-with-a-notification" class="level2">
<h2 class="anchored" data-anchor-id="it-all-starts-with-a-notification">It all starts with a notification</h2>
<p>A couple of weeks ago, I got a notification from LinkedIn. Unlike the usual notifications, this was not from an anonymous recruiter viewing my profile. It was a post by <a href="https://www.jumpingrivers.com/authors/russ-hyde/">Russ Hyde</a> who was looking for examples on how to organize the code in a Python Shiny app. He bumped into my repository on the <a href="https://github.com/novica/pyshinywikidata">topic</a>. For the curious, there is also an accompanying <a href="../../post/packaging-a-python-shiny-app/">blog post</a> where I describe a simple approach to package a Python Shiny app.</p>
<p>It was a great reminder that I should look into my previous work, as I was anyhow trying to figure out different ways to deploy Python Shiny apps to Posit Connect.</p>
<p>At the same time the relatively new Python packager and project manager called <a href="https://docs.astral.sh/uv/">uv</a> caught my attention with many internet resources about its features popping up, more or less, at the same time (for example: <a href="https://github.com/gdamjan/uv-getting-started">demo project by Damjan</a>, <a href="https://talkpython.fm/episodes/show/476/unified-python-packaging-with-uv">Unified Python packaging with uv</a>).</p>
<p>So I thought why not test how Shiny for Python would work with <code>uv</code> and whether this package manager can be used to in a setup for deployments to Posit Connect.</p>
</section>
<section id="step-1-start-a-new-uv-project-and-add-your-code" class="level2">
<h2 class="anchored" data-anchor-id="step-1-start-a-new-uv-project-and-add-your-code">Step 1: Start a new <code>uv</code> project and add your code</h2>
<p>Setting up a new <code>uv</code> project is pretty straightforward, and their <a href="https://docs.astral.sh/uv/guides/projects/">projects guide</a> make is even simpler.</p>
<p>I just ran:</p>
<p><code>$ uv init py-shiny-uv</code></p>
<p>and I get a new folder with the following contents:</p>
<pre><code>.
├── hello.py
├── pyproject.toml
└── README.md</code></pre>
<p>No surprises here.</p>
<p>Then, since I already had all the code organized in the repo above, I just copied everything (including the <code>.git</code> folder and <code>.gitignore</code> file) to the <code>uv</code> project folder, and removed the <code>hello.py</code>. Now the Shiny Python application is part of the <code>uv</code> directory.</p>
</section>
<section id="step-2-project-specific-python-version" class="level2">
<h2 class="anchored" data-anchor-id="step-2-project-specific-python-version">Step 2: Project-specific python version</h2>
<p>Next, I needed a specific version of Python (my Posit Connect instance runs on 3.11.5).</p>
<p>First, I updated my <code>pyproject.toml</code> to have the required Python version.</p>
<p>Then, adding a specific Python version to the project is also simple. After navigating to the project folder, I just ran:</p>
<pre><code>$ uv venv --python 3.11.5</code></pre>
<p>And it gets installed in seconds. I can activate the environment in the usual way:</p>
<pre><code>$ source .venv/bin/activate</code></pre>
<p>And check the version:</p>
<pre><code>(py-shiny-uv) $ python --version

3.11.5</code></pre>
<p>This is the environment in which further development of the app could happen.</p>
<p>At this point I checked the git status and I have one new untracked file <code>.python-version</code>, which, as expected, has the Python version written inside.</p>
</section>
<section id="step-3-install-shiny-and-other-dependencies-for-the-app" class="level2">
<h2 class="anchored" data-anchor-id="step-3-install-shiny-and-other-dependencies-for-the-app">Step 3: Install Shiny and other dependencies for the app</h2>
<p>The example application depends on three packages: <code>shiny</code>, <code>SPARQLWrapper</code>, and <code>pandas</code>, and I added those. Adding this to the <code>uv</code> environment can be done with <code>uv add</code>:</p>
<pre><code>(py-shiny-uv) $ uv add pandas shiny SPARQLWrapper</code></pre>
<p>Then I just verified that the packages load by running python and importing.</p>
</section>
<section id="step-4-create-the-requirements.txt-and-manifest.json-needed-for-deploying-to-posit-connect" class="level2">
<h2 class="anchored" data-anchor-id="step-4-create-the-requirements.txt-and-manifest.json-needed-for-deploying-to-posit-connect">Step 4: Create the <code>requirements.txt</code> and <code>manifest.json</code> needed for deploying to Posit Connect</h2>
<p>As you might know if you are working with Shiny app in Python, the <code>rsconnect-python</code> package is needed to generate the <code>manifest.json</code> file. The manifest is used by Posit Connect when publishing from a git repository (which is something that I want to do).</p>
<p>Usually the way to do it is to run in the app folder:</p>
<pre><code>$ rsconnect write-manifest shiny .</code></pre>
<p>But since the idea is to use <code>uv</code> I had to try, and fail multiple times, with it.</p>
<p>First, the problem with <code>rsconnect</code> is that it generates the files in the app directory, instead of the top level python project. Moving the files is a possibility, of course, but it seems it is an unnecessary complication.</p>
<p>The default way to get the requirements with <code>uv</code> is:</p>
<pre><code>$ uv export -o requirements.txt</code></pre>
<p>This, however, generates the dependencies with hashes, which then is a problem with the package environment not having a hash. To quote the error log:</p>
<blockquote class="blockquote">
<p>The editable requirement pyshinywikidata cannot be installed when requiring hashes, because there is no single file to hash.</p>
</blockquote>
<p>Omitting the package with:</p>
<pre><code>$ uv export --no-emit-project -o requirements.txt</code></pre>
<p>Fails because now the package containing the app is no longer in <code>requirements.txt</code>, and Posit Connect can’t find the module to run.</p>
<p>Finally, after a few more trial and errors, I found the solution in the <code>--no-hashes</code> option of the <code>uv export</code> command.</p>
<p>Then, I needed to use <code>uv</code> to generate the manifest too. And <code>uv</code> has this nice feature where a tool can be invoked without installing it, which is handy for the <code>rsconnect-python</code> package. Here, the <code>--entrypoint</code> needs to be set up so that Posit Connect knows that the app is in the installed package.</p>
<p>The full <code>uv</code> set of commands is:</p>
<pre><code># update the project environment
$ uv sync 

# generate the the requirements.txt file
$ uv export --no-hashes -o requirements.txt 

# generate the manifest.json file. note the entrypoint.
$ uvx --from rsconnect-python --python .venv/bin/python rsconnect write-manifest shiny .  --entrypoint pyshinywikidata.app:app </code></pre>
<p>At this point <code>git status</code> said I have new files in the repository, as expected. So then I just added them to the repository.</p>
</section>
<section id="step-5-generate-requirements.txt-and-manifest.json-with-github-actions" class="level2">
<h2 class="anchored" data-anchor-id="step-5-generate-requirements.txt-and-manifest.json-with-github-actions">Step 5: Generate <code>requirements.txt</code> and <code>manifest.json</code> with GitHub actions</h2>
<p>Whenever changes to the code are made, <code>requirements.txt</code> and <code>manifest.json</code> may need to be regenerated and committed to the repository so that Posit Connect knows how to update the app. But, forgetting to do this would not be strange. So why not automate it?</p>
<p>Posit Connect can only listen to branches, so the idea is to have a <code>deploy</code> branch which Connect publishes, but which is managed by GitHub actions.</p>
<p>With a little help from existing <code>yaml</code> files, I stitched together a <a href="https://github.com/novica/pyshinywikidata/blob/main/.github/workflows/update-requirements.yaml">workflow script</a> that creates the needed files on the <code>deploy</code> branch and then successfully deployed it to Posit Connect.</p>
<p>Amazing!</p>
<p>Additionally, I needed to allow workflow permission in my repository settings to be able to read and write. That’s under <code>Settings -&gt; Select Actions → General -&gt; Workflow -&gt; Read</code> and write permissions.</p>
<p>All the code and my trials and errors are under the repo at: <a href="https://github.com/novica/pyshinywikidata/">https://github.com/novica/pyshinywikidata/</a>.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this article, I reviewed the procedure of setting up a <code>uv</code> project manager environment for a Python Shiny application and integrating the project with GitHub Actions to enable automated deployment to Posit Connect.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>automation</category>
  <guid>https://discindo.org/posts/2024-09-21-using-uv-to-manage-the-environment-for-a-python-shiny-app-and-set-up-a-workflow-to-publish-it-to-posit-connect/</guid>
  <pubDate>Fri, 20 Sep 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Shiny ducks: connecting to MotherDuck from Shiny</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2024-06-27-shiny-ducks-connecting-to-motherduck-from-shiny/</link>
  <description><![CDATA[ 





<p>In a previous post I wrote about how to <a href="post/joining-the-flock-from-r-working-with-data-on-motherduck/">connect to MotherDuck from R</a>. However, the process described there, where you click in the browser to authenticate, wouldn’t really work with a Shiny app, or for that matter with any productionized setup. And R without Shiny is like pizza without pineapple. So let’s see how to set up a Shiny that will run some queries on <code>MotherDuck</code>.</p>
<p>If you recall, there is a token that is used to authenticate to <code>MotherDuck</code>. You can go back to the previous post to see how to obtain the token via R, or you can log into setting on your <code>MotherDuck</code> account and simply copy it from there.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/posts/2024-06-27-shiny-ducks-connecting-to-motherduck-from-shiny/images/Screenshot_20240627_135442.png" class="img-fluid figure-img"></p>
<figcaption>motherduck token</figcaption>
</figure>
</div>
<p>After that, store that in an environment variable. You could save it permanently in <code>.Renviron</code> or just use <code>Sys.setenv()</code> if you are trying out things. Anyway you should verify that the token is available when running <code>Sys.getenv('MD_TOKEN')</code>, where <code>MD_TOKEN</code> is what I decided to name this variable.</p>
<section id="connecting-to-motherduck-from-the-shiny-server" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-motherduck-from-the-shiny-server">Connecting to MotherDuck from the Shiny server</h3>
<p>The main part of the Shiny app (well, at least the demo Shiny, scroll down for the full code) is establishing a connection to <code>MotherDuck</code>. And since the <code>R</code> version of <code>duckdb</code> doesn’t automatically load the <code>motherduck</code> extension, we have to do that step by step:</p>
<pre><code>con &lt;- DBI::dbConnect(duckdb::duckdb(), ":memory:")
  
# Install and load the MotherDuck extenstion
DBI::dbExecute(con, "INSTALL 'motherduck';")
DBI::dbExecute(con, "LOAD 'motherduck';")
  
# Define the query to authenticate
auth_query &lt;- glue::glue_sql("SET motherduck_token= {`Sys.getenv('MD_TOKEN')`};", .con = con)
  
DBI::dbExecute(con, auth_query)
  
# Connect to MotherDuck
DBI::dbExecute(con, "PRAGMA MD_CONNECT")</code></pre>
<p>Here we create an in-memory duckdb and use that to install and load the extension. Then we authenticate with the token that is stored in an environment variable.</p>
<p>Note, the <code>PRAGMA</code> statement here is <a href="https://duckdb.org/docs/configuration/overview.html#configuration-reference">duckdb’s way</a> of “changing the behavior of the system” which is what we are doing with loading the extension.</p>
<p>If you run the above code in a normal R script you will still connect to <code>MotherDuck</code>, which is of course expected.</p>
<p>Then is just about adding the other pats of the shiny app together:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/posts/2024-06-27-shiny-ducks-connecting-to-motherduck-from-shiny/images/Screenshot_20240628_180326.png" class="img-fluid figure-img"></p>
<figcaption>app screenshot</figcaption>
</figure>
</div>
<p>And the whole code below:</p>
<pre><code>library(shiny)
library(duckdb)

ui &lt;- fluidPage(
  titlePanel("DuckDB and Shiny Integration"),
  sidebarLayout(sidebarPanel(
    helpText(
      "This app connects to MotherDuck and queries the sample WHO dataset."
    ),
    uiOutput("cities")
  ), mainPanel(tableOutput("data_table")))
)


server &lt;- function(input, output, session) {
  # Connect to an in-memory DuckDB database
  con &lt;- DBI::dbConnect(duckdb::duckdb(), ":memory:")
  
  # Install and load the MotherDuck extenstion
  DBI::dbExecute(con, "INSTALL 'motherduck';")
  DBI::dbExecute(con, "LOAD 'motherduck';")
  
  # Define the query to authenticate
  auth_query &lt;- glue::glue_sql("SET motherduck_token= {`Sys.getenv('MD_TOKEN')`};", .con = con)
  
  DBI::dbExecute(con, auth_query)
  
  # Connect to MotherDuck
  DBI::dbExecute(con, "PRAGMA MD_CONNECT")
  
  cities &lt;- DBI::dbGetQuery(con,
                            "SELECT DISTINCT(city) FROM sample_data.who.ambient_air_quality LIMIT 25;")
  
  output$cities &lt;- renderUI({
    tagList(selectInput(
      inputId = "city",
      label = "City",
      choices = cities
    ))
  })
  
  query_rct &lt;- reactive({
    req(input$city)
    city_name &lt;- input$city
    glue::glue_sql(
      "SELECT country_name, city, \"year\", pm10_concentration, pm25_concentration, no2_concentration, FROM sample_data.who.ambient_air_quality WHERE  city = '{`city_name`}';",
      .con = con
    )
  })
  
  
  data_rct &lt;- reactive({
    req(query_rct())
    message(query_rct())
    DBI::dbGetQuery(con, query_rct())
  })
  
  
  # Render the table output
  output$data_table &lt;- renderTable({
    data_rct()
  })
  
  onSessionEnded({function() {DBI::dbDisconnect(con)} })  
}

shinyApp(ui = ui, server = server)</code></pre>
</section>
<section id="closing-notes" class="level3">
<h3 class="anchored" data-anchor-id="closing-notes">Closing notes</h3>
<p>Since this is just a demo app I am limiting the cities output to 25 to avoid Shiny complaining about the long vector of city names (8000+). You could obviously modify that to get cities in Europe or something else.</p>
<p>The SQL statements can be rewritten in <code>duckplyr</code>, but for me it was convenient to test a query in <code>MotherDuck</code> and just paste it in the <code>R</code> code like this.</p>
<p>Of course, it would be better to have dashboard-ready tables (aggregations, summaries) that can be used in the Shiny app directly, and something like that can be achieved with <code>dbt</code> or <code>SQLMesh</code>, but maybe I will do that in another post.</p>
<p>Finally, I don’t recommend deploying this app on <a href="https://shinyapps.io">shinyapps.io</a>. I tried and it takes too much time to compile and install the <code>duckdb</code> package, that I got a timeout. But it works nicely when running it from <code>RStudio</code>.</p>
<p>Happy quacking!</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://discindo.org/posts/2024-06-27-shiny-ducks-connecting-to-motherduck-from-shiny/</guid>
  <pubDate>Thu, 27 Jun 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Few notes on getting R package data from the local library</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2024-06-23-few-notes-on-getting-r-package-data-from-the-local-library/</link>
  <description><![CDATA[ 





<p>I am involved in a <a href="https://posit.co/products/enterprise/team/">Posit Team</a> deployment, and one of the things that we are looking into is default R packages that should be made available to all users. We are looking to do this because we would like to avoid people installing, for example <code>tidyverse</code>, in their own local libraries in order to save on space and to make sure everyone is on the same version, at least for the packages that are considered to be a preferred default option for working with data in R.</p>
<p>In order to do this we wanted to collect all the packages that are currently used, their versions, source repository and similar information. That way we can see if anything else should be installed for all users, in addition to the best guess that we should have <code>tidyverse</code>, <code>tidymodels</code>, and <code>shiny</code>.</p>
<p>In order to do this we first have to get the list of installed packages, which is fairly simple to do:</p>
<pre><code>installed_packages &lt;- installed.packages()</code></pre>
<p>Then, <code>utils::packageDescription</code> can be used to get the packages<code>descriptions. For example for getting the package description for</code>dplyr` we can run:</p>
<pre><code>dplyr_pkg_desc &lt;- utils::packageDescription('dplyr')</code></pre>
<p>The result is a list, and it can be subsetted to see details, for example:</p>
<pre><code>&gt; dplyr_pkg_desc[1]
$Type
[1] "Package"

&gt; dplyr_pkg_desc[2]
$Package
[1] "dplyr"

&gt; dplyr_pkg_desc[3]
$Title
[1] "A Grammar of Data Manipulation"

&gt; dplyr_pkg_desc[4]
$Version
[1] "1.1.4"</code></pre>
<p>At this point, I am thinking that all these description files have the same structure. Therefore, if I want to get all packages’ version I need to <code>lapply</code> to get the fourth element and that’s that. It turns out this is not entirely true. Not all packages have the same structure of the description. See <code>tydir</code>:</p>
<pre><code>&gt; tidyr_pkg_desc[1]
$Package
[1] "tidyr"

&gt; tidyr_pkg_desc[2]
$Title
[1] "Tidy Messy Data"

&gt; tidyr_pkg_desc[3]
$Version
[1] "1.3.1"

&gt; tidyr_pkg_desc[4]
$`Authors@R`
[1] "c(\n    person(\"Hadley\", \"Wickham\", , \"hadley@posit.co\", role = c(\"aut\", \"cre\")),\n    person(\"Davis\", \"Vaughan\", , \"davis@posit.co\", role = \"aut\"),\n    person(\"Maximilian\", \"Girlich\", role = \"aut\"),\n    person(\"Kevin\", \"Ushey\", , \"kevin@posit.co\", role = \"ctb\"),\n    person(\"Posit Software, PBC\", role = c(\"cph\", \"fnd\"))\n  )"</code></pre>
<p>Number four is the authors, and version is three. And these are two packages that are ultimately from the same author. Look at <code>data.table</code>:</p>
<pre><code>&gt; data.table_pkg_desc[1]
$Package
[1] "data.table"

&gt; data.table_pkg_desc[2]
$Version
[1] "1.15.4"

&gt; data.table_pkg_desc[3]
$Title
[1] "Extension of `data.frame`"

&gt; data.table_pkg_desc[4]
$Depends
[1] "R (&gt;= 3.1.0)"</code></pre>
<p>Now, of course, subsetting works with using the name, instead of the position:</p>
<pre><code>&gt; dplyr_pkg_desc[["Version"]]
[1] "1.1.4"
&gt; tidyr_pkg_desc[["Version"]]
[1] "1.3.1"
&gt; data.table_pkg_desc[["Version"]]
[1] "1.15.4"</code></pre>
<p>However, to be honest, it rarely comes to my mind to subset lists like this.</p>
<pre><code>package_names &lt;- installed.packages()[, 1]

all_packages_data &lt;- lapply(package_names,  utils::packageDescription)

version_number &lt;-
  lapply(1:length(package_names), function (x) {
    all_packages_data[[x]][["Version"]]
  })</code></pre>
<p>The above is possible, and then to <code>cbind</code> all needed fields in a <code>data.frame</code>.</p>
<p>However, looking at the <code>packageDescription</code> documentation, it seems the best way is to use additional arguments the function. This is neat:</p>
<pre><code>package_data &lt;- lapply(
  package_names,
  utils::packageDescription,
  fields = c("Package", "Version", "Built", "Repository")
) </code></pre>
<p>And then there is another surprise. The results are with class <code>packageDescription</code> which makes getting to a <code>data.frame</code>, or <code>tibble</code> in this case, a bit complicated:</p>
<pre><code>package_data &lt;- purrr::map_df(
  package_names,
  utils::packageDescription,
  fields = c("Package", "Version", "Built", "Repository")
) 
Error in `as_tibble()`:
! All columns in a tibble must be vectors.
✖ Column `askpass` is a `packageDescription` object.</code></pre>
<p>The full solution involves a step of changing the class of the object using <code>as</code>, and then reassigning the names of each element, because the previous step removes them:</p>
<pre><code>package_data &lt;- lapply(
  package_names,
  utils::packageDescription,
  fields = c("Package", "Version", "Built", "Repository")
) |&gt; 
  lapply(as, Class = "list") |&gt; 
  lapply(setNames, c("Package", "Version", "Built", "Repository")) |&gt; 
  dplyr::bind_rows()</code></pre>
<section id="update-2024-06-23-1644-cest" class="level3">
<h3 class="anchored" data-anchor-id="update-2024-06-23-1644-cest">Update 2024-06-23, 16:44 CEST</h3>
<p>Many thanks to <a href="https://github.com/ibecav">Chuck Powell</a> for sending a message that all of this can be achieved with one simple command from the package <code>pak</code>:</p>
<pre><code>pak::pkg_list()</code></pre>
<p>Awesome. :)</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://discindo.org/posts/2024-06-23-few-notes-on-getting-r-package-data-from-the-local-library/</guid>
  <pubDate>Sat, 22 Jun 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Joining the flock from R: working with data on MotherDuck</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2024-06-21-joining-the-flock-from-r-working-with-data-on-mother-duck/</link>
  <description><![CDATA[ 





<p>With DuckDB <a href="https://duckdb.org/2024/06/03/announcing-duckdb-100.html">releasing</a> version 1.0.0 on June 3rd, and MotherDuck <a href="https://motherduck.com/blog/announcing-motherduck-general-availability-data-warehousing-with-duckdb/">following</a> with the general availability announcement on June 11th, it is a perfect opportunity to see how both can be used from <code>R</code>. I work for an organization where <code>R</code> is the default language for doing most of the analytics, so being able to do this is more than just simple curiosity.</p>
<blockquote class="blockquote">
<p>Update: 2024.12.07: The steps described below will not work on Windows. The <code>motherduck</code> extension is not supported (yet). People have also experienced issues with running it on Mac, but I cannot test that, so if someone makes it work, let me know.</p>
</blockquote>
<section id="my-setup" class="level3">
<h3 class="anchored" data-anchor-id="my-setup">My setup</h3>
<p>I am running <code>R</code> version 4.4.1 on Linux, with <code>duckdb</code> <a href="https://r.duckdb.org/">version</a> 1.0.0.</p>
<p>I have <code>python</code> version 3.12, and I am installing <code>duckb</code> 1.0.0 in a virtual environment.</p>
<p>I installed the <code>duckdb</code> version 1.0.0 binary as well, and <a href="https://duckdb.org/docs/extensions/overview.html">installed</a> the <code>motherduck</code> extension.</p>
<p>And, of course, I also have created an account on <a href="https://motherduck.com/">MotherDuck</a>.</p>
</section>
<section id="running-duckdb-in-r" class="level3">
<h3 class="anchored" data-anchor-id="running-duckdb-in-r">Running duckdb in R</h3>
<p>This has been probably <a href="https://duckdb.org/docs/api/r">covered</a> many times so far. Nevertheless, for completeness, running <code>duckdb</code> in <code>R</code> is fairly straight forward:</p>
<pre><code># Connect to an in-memory DuckDB database
con &lt;- dbConnect(duckdb::duckdb(), ":memory:")

# Write the Iris dataset to the DuckDB in-memory database
dbWriteTable(con, "iris", iris)

# Query data from the DuckDB database
data &lt;- dbGetQuery(con, "SELECT * FROM iris")
</code></pre>
<p>Of course, there is the possibility of doing things with <a href="https://duckdblabs.github.io/duckplyr/">duckplyr</a>, but we are not going to go into that.</p>
</section>
<section id="connecting-to-motherduck" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-motherduck">Connecting to MotherDuck</h3>
<p>MotherDuck documentation has details about <a href="https://motherduck.com/docs/getting-started/connect-query-from-python/installation-authentication">connecting</a> to MotherDuck using <code>python</code>, but not for connecting using <code>R</code>.</p>
<p>After asking a few questions on the discord, I learned that the process should be similar.</p>
<p>Let’s see how that looks.</p>
<section id="python" class="level4">
<h4 class="anchored" data-anchor-id="python">Python</h4>
<p>In a Python 3.12 virtual environment, that has <code>duckdb-1.0.0</code>, getting to MotherDuck is simple, in fact as the documentation says:</p>
<pre><code>import duckdb

# connect to MotherDuck using 'md:' or 'motherduck:'
con = duckdb.connect('md:')</code></pre>
<p>The above results in getting a notification on the terminal:</p>
<pre><code>Attempting to automatically open the SSO authorization page in your default browser.
1. Please open this link to login into your account: https://auth.motherduck.com/activate
2. Enter the following code: XXXX-XXXX</code></pre>
<p>Nothing else is required here. We click in the browser, establish a connection, get a token, etc.</p>
</section>
<section id="r" class="level4">
<h4 class="anchored" data-anchor-id="r">R</h4>
<p>However, doing the same with R doesn’t have the same outcome:</p>
<pre><code>con &lt;- DBI::dbConnect(duckdb::duckdb(), "md:")</code></pre>
<p>Creates a local database called <code>md:</code>:</p>
<pre><code>ls -lh md\: 
-rw-r--r-- 1 novica novica 12K jun 21 10:32 md:</code></pre>
<p>My best guess here is that the <code>duckdb</code> package for <code>R</code> does not automatically figure out that it should load the <code>motherduck</code> extension, as is probably the case in <code>python</code>.</p>
<p>The approach in R is then similar to what is suggested in the section <a href="https://motherduck.com/docs/getting-started/connect-query-from-python/installation-authentication#connecting-to-motherduck-after-opening-a-local-duckdb-database">Connecting to MotherDuck after opening a local DuckDB database</a>:</p>
<pre><code># Create a local database
con &lt;- DBI::dbConnect(duckdb::duckdb(), "local.duckdb")


# Note: Installing the extension is not nececsary here since 
# I already have it installed on my system. However, if you don't want
# to go to the trouble of installing the duckdb binary and then installing
# extensions, then it is possible to do the installation here before
# loading with:
# DBI::dbExecute(con, "INSTALL 'motherduck';")

# Load the Mother Duck extension
DBI::dbExecute(con, "LOAD 'motherduck';")


# Verify that the extension is loaded
DBI::dbGetQuery(
  con,
  "SELECT extension_name, loaded, installed FROM duckdb_extensions() WHERE
  extension_name = 'motherduck'"
)

# Connect to MotherDuck
DBI::dbExecute(con, "PRAGMA MD_CONNECT")</code></pre>
<p>At which point the message for authenticating in the browser shows up in the terminal.</p>
<p>After approving the connection, as the friendly message says, the token can be stored in an environment variable to avoid having to log in again.</p>
<p>Then it is a simple matter of querying things on MotherDuck:</p>
<pre><code># Query the sample data about air quality that is avaiable on MotherDuck
DBI::dbGetQuery(
  con,
  "SELECT country_name, city, \"year\", pm10_concentration, pm25_concentration, no2_concentration, FROM sample_data.who.ambient_air_quality WHERE  city = 'Skopje' OR city = 'Oslo';"
)</code></pre>
<p>Note that we have to specify the database name: <code>sample_data</code>, and the schema: <code>who</code> to query the data on MotherDuck.</p>
<p>The results can be assigned to an object in R, which I did. And since it is always fun to make a plot, here is how it looks for the two cities where I spend most of my time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/posts/2024-06-21-joining-the-flock-from-r-working-with-data-on-mother-duck/images/particles.png" class="img-fluid figure-img"></p>
<figcaption>Particle concentration plot</figcaption>
</figure>
</div>
<p>And, that’s a wrap. I mean, a quack. :)</p>


</section>
</section>

 ]]></description>
  <category>R</category>
  <guid>https://discindo.org/posts/2024-06-21-joining-the-flock-from-r-working-with-data-on-mother-duck/</guid>
  <pubDate>Thu, 20 Jun 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to set up development and production environments using AWS Copilot: Example using a plumber API.</title>
  <dc:creator>Teo </dc:creator>
  <link>https://discindo.org/posts/2024-02-25-how-to-set-up-development-and-production-environments-using-aws-copilot-example-using-a-plumber-api/</link>
  <description><![CDATA[ 





<p>In this post I am documenting step-by-step the process of deploying dev/stage/prod environments and instances of a <code>{plumber}</code> API on <a href="https://aws.amazon.com/apprunner/">AWS AppRunner</a> using <a href="https://aws.amazon.com/containers/copilot/">AWS Copilot</a>. This is an expanded follow up to a <a href="https://discindo.org/post/deploying-plumber-api-to-aws-elastic-container-service/">previous post</a> on the topic.</p>
<section id="prerequisites" class="level1">
<h1>Prerequisites</h1>
<p>To manage AWS resources, we need the AWS <a href="https://aws.amazon.com/cli/"><code>command line interface (cli)</code></a>. To build our infrastructure we’ll use AWS Copilot. Follow instructions for installation <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Copilot.html#copilot-install">here</a>. Copilot is a command line interface for containerized applications, so we’ll also need a tool to containerize our <code>{plumber}</code> API. Typically <code>docker</code> which can be installed following these <a href="https://docs.docker.com/get-docker/">instructions</a>.</p>
</section>
<section id="aws-access-and-services" class="level1">
<h1>AWS Access and Services</h1>
<p>The process described below, including the permissions policies, makes minimal assumptions about the permissions a user will have on AWS. It should be enough to get us started even if we did not have access to any of the needed services. Though, of course we’ll still require an account administrator to grant us the access by attaching policies to our AWS user or group.</p>
<p>During setup and deployment AWS Copilot requires access to multiple AWS services:</p>
<ul>
<li>AWS Identity and access management (IAM)</li>
<li>AWS Elastic container registry (ECR)</li>
<li>AWS Cloud formation (CNF)</li>
<li>AWS Simple storage service (S3)</li>
<li>AWS Security token service (STS)</li>
<li>AWS Key management service (KMS)</li>
<li>AWS Systems manager (SSM)</li>
<li>AWS Tags manager (TAG)</li>
</ul>
</section>
<section id="aws-setup" class="level1">
<h1>AWS Setup</h1>
<p>Assume <code>user</code> with minimal permissions. Added policies will be documented below. AWS Copilot uses the <code>AWS_PROFILE</code> environmental variable and assumes the <code>aws cli</code> has been <a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-quickstart.html">configured</a>. When properly configured, our development machine will have an <code>.aws</code> folder with <code>config</code> and <code>credentials</code> files defining the different users, regions, <code>aws_secret_access_key</code> and <code>aws_secret_key_id</code>.</p>
<pre><code>export $AWS_PROFILE=noob</code></pre>
<section id="docker-images" class="level2">
<h2 class="anchored" data-anchor-id="docker-images">Docker images</h2>
<section id="base-image-dockerfile_base" class="level3">
<h3 class="anchored" data-anchor-id="base-image-dockerfile_base">Base image (Dockerfile_base)</h3>
<p>This builds the base image, setting up the R environment and dependencies for the API. Assuming dependencies will not change often, this image can be pushed to ECR once and then used to rebuild the API image as the API evolves. If dependencies change, this image would have to be rebuilt and pushed to ECR.</p>
<pre><code>docker build -d Dockerfile_base -t "myapi_base" .</code></pre>
<p>The code below tags the image with the name provided by AWS when we create the registry for the base image. Then, it obtains AWS ECR login credentials and pushes the local image to AWS ECR. This makes it available for AWS Copilot, as it is needed when AWS Copilot builds our API service docker image.</p>
<pre><code>docker tag myapi_base &lt;aws_account_number&gt;.dkr.ecr.&lt;aws_region&gt;.amazonaws.com/myapi_base
aws ecr get-login-password | \
  docker login -u AWS --password-stdin \
  &lt;aws_account_number&gt;.dkr.ecr.&lt;aws_region&gt;.amazonaws.com/myapi</code></pre>
</section>
<section id="service-image-dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="service-image-dockerfile">Service image (Dockerfile)</h3>
<p>Make sure its <code>FROM</code> instruction is the base registry above</p>
<pre><code>FROM &lt;aws_account_number&gt;.dkr.ecr.&lt;aws_region&gt;.amazonaws.com/myapi_base
RUN installr -d remotes
RUN mkdir /build_zone
ADD . /build_zone
WORKDIR /build_zone
RUN R -e 'remotes::install_local(upgrade="never")'
RUN rm -rf /build_zone
EXPOSE 5050
CMD  ["R", "-e", "library(myapi); run_api(port = 5050, host = '0.0.0.0')"]</code></pre>
</section>
</section>
<section id="initialize-aws-resources" class="level2">
<h2 class="anchored" data-anchor-id="initialize-aws-resources">Initialize AWS resources</h2>
<p>Initialize the application with <code>aws copilot</code></p>
<pre><code>copilot app init myapi-api</code></pre>
<p>Initialize environments:</p>
<pre><code>copilot env init --name dev --profile noob
copilot env init --name stage --profile noob
copilot env init --name prod --profile noob</code></pre>
<p>At this point the deployment <code>copilot</code> directory will look like so:</p>
<pre><code>copilot/
├── environments
│&nbsp;&nbsp; ├── dev
│&nbsp;&nbsp; │&nbsp;&nbsp; └── manifest.yml
│&nbsp;&nbsp; ├── prod
│&nbsp;&nbsp; │&nbsp;&nbsp; └── manifest.yml
│&nbsp;&nbsp; └── stage
│&nbsp;&nbsp;     └── manifest.yml
└── .workspace</code></pre>
</section>
<section id="deploy" class="level2">
<h2 class="anchored" data-anchor-id="deploy">Deploy</h2>
<p>For each environment, copilot will first deploy the environment using CloudFromation, and then push build and push the Docker image to Elastic Container Registry, and finally configure AppRunner to make the service available.</p>
<p>Dev env</p>
<pre><code>copilot init -d ./Dockerfile --app myapi-api -n myapi -t "Request-Driven Web Service" -e dev</code></pre>
<p>Stage env</p>
<pre><code>copilot init -d ./Dockerfile --app myapi-api -n myapi -t "Request-Driven Web Service" -e stage</code></pre>
<p>Prod env</p>
<pre><code>copilot init -d ./Dockerfile --app myapi-api -n myapi -t "Request-Driven Web Service" -e prod</code></pre>
</section>
<section id="secrets" class="level2">
<h2 class="anchored" data-anchor-id="secrets">Secrets</h2>
<p>Create the secret</p>
<pre><code>copilot secret init
# follow promts</code></pre>
<p>Update the application manifest, should look like this:</p>
<pre><code># You can override any of the values defined above by environment.
environments:
  dev:
    variables:
      LOG_LEVEL: debug # Log level for the "test" environment.
    secrets:
      SECRET: /copilot/myapi-api/dev/secrets/SECRET
  stage:
    secrets:
      SECRET: /copilot/myapi-api/stage/secrets/SECRET
  prod:
    secrets:
      SECRET: /copilot/myapi-api/prod/secrets/SECRET</code></pre>
<p>Redeploy the service instance for each env</p>
<pre><code>copilot svc deploy --env dev
copilot svc deploy --env stage
copilot svc deploy --env prod</code></pre>
</section>
<section id="aws-permission-policies-for-used-services" class="level2">
<h2 class="anchored" data-anchor-id="aws-permission-policies-for-used-services">AWS permission policies for used services</h2>
<section id="cloudformation" class="level3">
<h3 class="anchored" data-anchor-id="cloudformation">CloudFormation</h3>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:DescribeStackSet",
                "cloudformation:CreateStack",
                "cloudformation:GetTemplate",
                "cloudformation:DescribeStackSetOperation",
                "cloudformation:DeleteStack",
                "cloudformation:UpdateStack",
                "cloudformation:DescribeStackResource",
                "cloudformation:UpdateStackSet",
                "cloudformation:CreateChangeSet",
                "cloudformation:DescribeChangeSet",
                "cloudformation:DeleteStackSet",
                "cloudformation:DescribeStacks",
                "cloudformation:TagResource",
                "cloudformation:GetTemplateSummary",
                "cloudformation:ListStackInstances",
                "cloudformation:CreateStackInstances",
                "cloudformation:ExecuteChangeSet",
                "cloudformation:DescribeStackEvents"
            ],
            "Resource": [
                "arn:aws:cloudformation:*:&lt;aws_account_number&gt;:type/resource/*",
                "arn:aws:cloudformation:*:&lt;aws_account_number&gt;:stackset-target/*",
                "arn:aws:cloudformation:*:&lt;aws_account_number&gt;:stackset/*:*",
                "arn:aws:cloudformation:*:&lt;aws_account_number&gt;:stack/*/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:CreateGeneratedTemplate",
                "cloudformation:ListStacks",
                "cloudformation:UpdateGeneratedTemplate",
                "cloudformation:ListStackSets",
                "cloudformation:DescribeGeneratedTemplate",
                "cloudformation:CreateStackSet",
                "cloudformation:ValidateTemplate"
            ],
            "Resource": "*"
        }
    ]
}</code></pre>
</section>
<section id="ecr" class="level3">
<h3 class="anchored" data-anchor-id="ecr">ECR</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:BatchGetImage",
        "ecr:CompleteLayerUpload",
        "ecr:DescribeImages",
        "ecr:TagResource",
        "ecr:DescribeRepositories",
        "ecr:BatchDeleteImage",
        "ecr:UploadLayerPart",
        "ecr:ListImages",
        "ecr:InitiateLayerUpload",
        "ecr:DeleteRepository",
        "ecr:BatchCheckLayerAvailability",
        "ecr:PutImage"
      ],
      "Resource": "arn:aws:ecr:*:&lt;aws_account_number&gt;:repository/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "ecr:CreateRepository",
        "ecr:DescribeRegistry",
        "ecr:GetAuthorizationToken"
      ],
      "Resource": "*"
    }
  ]
}
</code></pre>
</section>
<section id="iam" class="level3">
<h3 class="anchored" data-anchor-id="iam">IAM</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "iam:GetRole",
        "iam:UpdateAssumeRolePolicy",
        "iam:ListRoleTags",
        "iam:GetPolicy",
        "iam:TagRole",
        "iam:CreateRole",
        "iam:PutRolePolicy",
        "iam:PassRole",
        "iam:CreateServiceLinkedRole",
        "iam:ListAttachedRolePolicies",
        "iam:UpdateRole",
        "iam:ListPolicyTags",
        "iam:ListRolePolicies",
        "iam:GetRolePolicy"
      ],
      "Resource": [
        "arn:aws:iam::&lt;aws_account_number&gt;:role/*",
        "arn:aws:iam::&lt;aws_account_number&gt;:policy/*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:ListPolicies",
        "iam:ListRoles"
      ],
      "Resource": "*"
    }
  ]
}
</code></pre>
</section>
<section id="kms" class="level3">
<h3 class="anchored" data-anchor-id="kms">KMS</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "kms:Decrypt",
        "kms:GenerateDataKey",
        "kms:DescribeKey"
      ],
      "Resource": "arn:aws:kms:*:&lt;aws_account_number&gt;:key/*"
    }
  ]
}
</code></pre>
</section>
<section id="s3" class="level3">
<h3 class="anchored" data-anchor-id="s3">S3</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:GetObjectAcl",
        "s3:GetObject",
        "s3:DeleteObject",
        "s3:PutObjectAcl"
      ],
      "Resource": "arn:aws:s3:::*/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutBucketAcl",
        "s3:CreateBucket",
        "s3:ListBucket",
        "s3:GetBucketAcl",
        "s3:DeleteBucket"
      ],
      "Resource": "arn:aws:s3:::*"
    }
  ]
}
</code></pre>
</section>
<section id="sts" class="level3">
<h3 class="anchored" data-anchor-id="sts">STS</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sts:AssumeRole",
        "sts:AssumeRoleWithWebIdentity"
      ],
      "Resource": "arn:aws:iam::&lt;aws_account_number&gt;:role/*"
    },
    {
      "Effect": "Allow",
      "Action": "sts:GetCallerIdentity",
      "Resource": "*"
    }
  ]
}</code></pre>
</section>
<section id="systemsmanager" class="level3">
<h3 class="anchored" data-anchor-id="systemsmanager">SystemsManager</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:PutParameter",
        "ssm:GetParametersByPath",
        "ssm:GetParameters",
        "ssm:GetParameter",
        "ssm:AddTagsToResource"
      ],
      "Resource": "arn:aws:ssm:&lt;aws_region&gt;:&lt;aws_account_number&gt;:parameter/*"
    },
    {
      "Effect": "Allow",
      "Action": "ssm:DescribeParameters",
      "Resource": "*"
    }
  ]
}</code></pre>
</section>
<section id="tag-tag-editor" class="level3">
<h3 class="anchored" data-anchor-id="tag-tag-editor">TAG (Tag editor)</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "tag:GetResources",
        "tag:GetTagValues",
        "tag:GetTagKeys"
      ],
      "Resource": "*"
    }
  ]
}</code></pre>
</section>
</section>
<section id="gh-actions" class="level2">
<h2 class="anchored" data-anchor-id="gh-actions">GH Actions</h2>
<p>Use this tutorial to create a <code>IAM</code> role for <code>GitHub Actions</code>: https://aws.amazon.com/blogs/security/use-iam-roles-to-connect-github-actions-to-actions-in-aws/</p>
<section id="policy-for-gh-actions-role" class="level3">
<h3 class="anchored" data-anchor-id="policy-for-gh-actions-role">Policy for GH Actions role</h3>
<p>The policies for GH Actions has reduced permissions. It is added to the role created above.</p>
<section id="trust-relationship" class="level4">
<h4 class="anchored" data-anchor-id="trust-relationship">Trust Relationship</h4>
<pre><code>{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Federated": "arn:aws:iam::&lt;aws_account_number&gt;:oidc-provider/token.actions.githubusercontent.com"
            },
            "Action": "sts:AssumeRoleWithWebIdentity",
            "Condition": {
                "StringEquals": {
                    "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
                },
                "StringLike": {
                    "token.actions.githubusercontent.com:sub": "repo:myorg/myrepo:ref:refs/*"
                }
            }
        }
    ]
}</code></pre>
</section>
<section id="sts-1" class="level4">
<h4 class="anchored" data-anchor-id="sts-1">STS</h4>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sts:AssumeRole",
        "sts:GetCallerIdentity",
        "sts:AssumeRoleWithWebIdentity"
      ],
      "Resource": "*"
    }
  ]
}</code></pre>
</section>
</section>
<section id="deploy-1" class="level3">
<h3 class="anchored" data-anchor-id="deploy-1">Deploy</h3>
<pre><code>{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Resource": "arn:aws:ssm:&lt;aws_region&gt;:&lt;aws_account_number&gt;:parameter/copilot/*",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParametersByPath",
        "ssm:GetParameter"
      ]
    },
    {
      "Resource": "arn:aws:cloudformation:&lt;aws_region&gt;:&lt;aws_account_number&gt;:stackset/myapi-infrastructure:*",
      "Effect": "Allow",
      "Action": [
        "cloudformation:ListStackInstances"
      ]
    },
    {
      "Resource": "arn:aws:cloudformation:&lt;aws_region&gt;:&lt;aws_account_number&gt;:stack/*",
      "Effect": "Allow",
      "Action": [
        "cloudformation:DescribeStacks"
      ]
    },
    {
      "Resource": "*",
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken"
      ]
    },
    {
      "Resource": [
        "arn:aws:ecr:&lt;aws_region&gt;:&lt;aws_account_number&gt;:repository/myapi/*",
        "arn:aws:ecr:&lt;aws_region&gt;:&lt;aws_account_number&gt;:repository/myapi_base"
      ],
      "Effect": "Allow",
      "Action": [
        "ecr:InitiateLayerUpload",
        "ecr:UploadLayerPart",
        "ecr:CompleteLayerUpload",
        "ecr:PutImage",
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:GetDownloadUrlForLayer"
      ]
    }
  ]
}</code></pre>
</section>
<section id="deploy-to-devstage-gh-action" class="level3">
<h3 class="anchored" data-anchor-id="deploy-to-devstage-gh-action">Deploy to dev/stage GH Action</h3>
<p>Deploy to dev/stage is triggered by push or pull request to the corresponding branches.</p>
<pre><code># This is a basic workflow to help you get started with Actions
name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]

env:
  AWS_REGION: "&lt;aws_region&gt;" #Change to reflect your Region

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  DeployService:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::&lt;aws_account_number&gt;:role/GitHubAction-AssumeRoleWithAction #change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      # - name: Sts GetCallerIdentity
      #   run: |
      #     aws sts get-caller-identity
      - name: Install copilot
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          # download copilot
          curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux &amp;&amp; \
          # make copilot bin executable
          chmod +x copilot-linux &amp;&amp; \
          # move to path
          mv copilot-linux $GITHUB_WORKSPACE/bin/copilot &amp;&amp; \
          # add to PATH
          echo "$GITHUB_WORKSPACE/bin" &gt;&gt; $GITHUB_PATH
          # - run: copilot help
      - name: deploy service
        run: copilot svc deploy --env dev
</code></pre>
</section>
<section id="deploy-to-prod-gh-action" class="level3">
<h3 class="anchored" data-anchor-id="deploy-to-prod-gh-action">Deploy to prod GH Action</h3>
<p>Deploy to PROD is triggered by manually creating a release in GitHub.</p>
<pre><code># This is a basic workflow to help you get started with Actions
name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  release:
    types: [published]

env:
  AWS_REGION: "&lt;aws_region&gt;" #Change to reflect your Region

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  DeployService:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::&lt;aws_account_number&gt;:role/GitHubAction-AssumeRoleWithAction #change to reflect your IAM role’s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      # - name: Sts GetCallerIdentity
      #   run: |
      #     aws sts get-caller-identity
      - name: Install copilot
        run: |
          mkdir -p $GITHUB_WORKSPACE/bin
          # download copilot
          curl -Lo copilot-linux https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux &amp;&amp; \
          # make copilot bin executable
          chmod +x copilot-linux &amp;&amp; \
          # move to path
          mv copilot-linux $GITHUB_WORKSPACE/bin/copilot &amp;&amp; \
          # add to PATH
          echo "$GITHUB_WORKSPACE/bin" &gt;&gt; $GITHUB_PATH
          # - run: copilot help
      - name: deploy service
        run: copilot svc deploy --env prod
</code></pre>
</section>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>A step-by-step guide to set up dev/stage/prod environments on AWS for deploying a <code>{plumber}</code> API on AWS AppRunner and setting up GitHub Actions workflows for automated deployments on the created AWS infrastructure.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>API</category>
  <category>plumber</category>
  <category>AWS</category>
  <category>AWS Copilot</category>
  <category>GitHub Actions</category>
  <guid>https://discindo.org/posts/2024-02-25-how-to-set-up-development-and-production-environments-using-aws-copilot-example-using-a-plumber-api/</guid>
  <pubDate>Sat, 24 Feb 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>A simple workflow for async {shiny} with {mirai}</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2024-01-15-a-simple-workflow-for-async-shiny-with-mirai/</link>
  <description><![CDATA[ 





<p>In my <a href="https://discindo.org/post/an-opiniated-workflow-for-async-shiny-with-callr/">previous post</a>, I developed a <code>shiny</code> module to encapsulate the logic of sending and monitoring background async tasks. The main advantage of this approach was to simplify making repeated async calls in larger applications. In the first version of this module, the async process was created with <code>callr:r_bg</code>, an approach that <a href="https://discindo.org/post/asynchronous-execution-in-shiny/">my self</a> and <a href="https://hypebright.nl/index.php/2023/09/12/async-programming-in-shiny-with-crew-and-callr/">others</a> have used before.</p>
<p>However, there is one, potentially significant, drawback of using <code>callr</code> in such a way. Take this hypotetical scenario as an example. You have a shiny app with five async tasks triggered in response to a user changing a dataset. You test it locally, and everything works great. Then you deploy and share with the world. Ten of your followers click on the link more-or-less at the same time and visit the application, each choosing one of three datasets available in your data science app. The app’s <code>server</code>, featuring <code>async</code> functions gets to work, and initializes 5 (tasks) * 10 (users) = 50 <code>callr::r_bg</code> calls, each running in a separate child R process. Some of these copy nothing the child enviroment, some only a few small objects, but others a large data object needed for the async function to transform or run a model. It should be no surprise if the app is no longer that fast. The hosting server, even with a fast, multi-thread processor, still hast to contend with many <code>R</code> processes and the <code>shiny</code> session is also getting a bit bogged down, as it has potentially dozens of observers monitoring background processes. Clearly, we need to rethink our approach.</p>
<p>Wouldn’t it be great if we had a way to limit the total number of concurrent child <code>R</code> processes that our <code>shiny</code> session would spawn, and have a queue system that would start another background job as soon as one completes? Enter <a href="https://github.com/shikokuchuo/mirai"><code>mirai</code></a>. <code>mirai</code> lets us initialize a set number of <code>R</code> <code>daemons</code> (persistent background processes) that are ready to receive <code>mirai</code> requests and ensures FIFO (first in, first out) scheduling. Using <code>mirai</code>, we can handle a large number of async background jobs elegantly without overburdening the system. If the number of jobs requested by the <code>shiny</code> app exceeds the number of available <code>daemons</code>, <code>mirai</code> would hold the jobs until one of the daemons (threads) frees up and submit on a first-come, first-serve basis. Just great!</p>
<section id="so-how-does-it-work" class="level2">
<h2 class="anchored" data-anchor-id="so-how-does-it-work">So how does it work?</h2>
<p>For example setups for <code>shiny</code>, check out the documentation, where you can read about <a href="https://shikokuchuo.net/mirai/articles/shiny.html#shiny-example-usage"><code>mirai</code>-only</a> solutions, as well as approaches combining <a href="https://shikokuchuo.net/mirai/articles/shiny.html#example-using-promises"><code>mirai</code> with <code>promises</code></a>.</p>
<p>For my application, I’ll adapt the <code>callr</code> approach I described in my <a href="https://discindo.org/post/an-opiniated-workflow-for-async-shiny-with-callr/">previous post</a> to work with <code>mirai</code>. In fact, there very little to change to make the <code>callr</code> example work with <code>mirai</code>:</p>
<ol type="1">
<li>Change the <code>async</code> version of our function to use <code>mirai</code></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">head_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, sleep) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(sleep)</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x)</span>
<span id="cb1-4">}</span>
<span id="cb1-5"></span>
<span id="cb1-6">head_six_async_mirai <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, sleep) {</span>
<span id="cb1-7">  args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_six =</span> head_six, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sleep =</span> sleep)</span>
<span id="cb1-8">  bg_process <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mirai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mirai</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.expr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head_six</span>(x, sleep), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.args =</span> args)</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(bg_process)</span>
<span id="cb1-10">}</span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Change the polling logic in the module’s server to use <code>mirai::unresolved</code>, rather than the <code>is_alive</code> method of the <code>callr</code> process object.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mod_async_srv_mirai <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id, fun_async, fun_args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wait_for_event =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>( id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session){</span>
<span id="cb2-3">    res_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb2-4">    poll_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(wait_for_event)) {</span>
<span id="cb2-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-8">    }</span>
<span id="cb2-9"></span>
<span id="cb2-10">    bg_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb2-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>()))</span>
<span id="cb2-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(fun_async, fun_args)</span>
<span id="cb2-13">    }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>())</span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>()))</span>
<span id="cb2-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invalidateLater</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)</span>
<span id="cb2-18">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (verbose) {</span>
<span id="cb2-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checking: %s"</span>, id))</span>
<span id="cb2-20">      }</span>
<span id="cb2-21"></span>
<span id="cb2-22">      alive <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mirai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unresolved</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>())</span>
<span id="cb2-23">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(alive)) {</span>
<span id="cb2-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">res_rct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data)</span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (verbose) {</span>
<span id="cb2-26">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"done: %s"</span>, id))</span>
<span id="cb2-27">        }</span>
<span id="cb2-28">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb2-29">      }</span>
<span id="cb2-30">    })</span>
<span id="cb2-31"></span>
<span id="cb2-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-33">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_job =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-34">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get_result =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">res_rct</span>())</span>
<span id="cb2-35">    ))</span>
<span id="cb2-36"></span>
<span id="cb2-37">  })</span>
<span id="cb2-38">}</span></code></pre></div>
</div>
<ol start="3" type="1">
<li>In the app’s <code>server</code>, or better yet <code>global.R</code> or equivalents, we need to initialize the <code>daemons</code>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">  mirai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">daemons</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L)</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">onStop</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() mirai<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">daemons</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L))</span></code></pre></div>
</div>
<p>In this setup, our shiny can run up to two parallel async jobs handled by the <code>mirai</code> queue. These <code>daemons</code> are shared across <em>all users</em> of our application, irrespective of the <code>shiny</code> session. This is because <code>mirai</code>’s daemons apply to the entire <code>R</code> session, not individual <code>shiny</code> sessions.</p>
</section>
<section id="gist" class="level2">
<h2 class="anchored" data-anchor-id="gist">Gist</h2>
<p>For a running example of <code>mirai</code> async with the module, visit this gist:</p>
<script src="https://gist.github.com/teofiln/59e69133e2ce08597b071ffa1cad5dc9.js"></script>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post I went over an approach to organize <code>mirai</code> background async jobs using a <code>shiny</code> module, in order to make the async code faster to write, less error prone and overall cleaner.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <category>async programming</category>
  <category>mirai</category>
  <guid>https://discindo.org/posts/2024-01-15-a-simple-workflow-for-async-shiny-with-mirai/</guid>
  <pubDate>Sun, 14 Jan 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>A simple workflow for async {shiny} with {callr}</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2024-01-12-an-opiniated-workflow-for-async-shiny-with-callr/</link>
  <description><![CDATA[ 





<p>In the <code>R/Shiny</code> community we are fortunate to have several approaches for async programming. It is an active field of development with a variety of options depending on the needs of the application. For examples and deeper overviews of the state of async programming in <code>R</code>, head over to Veerle van Leemput’s <a href="https://hypebright.nl/index.php/2023/09/05/mastering-async-programming-shiny/">writing</a>, the <a href="https://www.futureverse.org/">Futureverse documentation</a> or the <a href="https://github.com/shikokuchuo/mirai/">mirai</a> / <a href="https://github.com/wlandau/crew">crew</a> repos.</p>
<p>In this post, I am going to focus on an approach to simplify making multiple async calls in <code>shiny</code> applications. Really, it boils down to developing a module that wraps the initialization and polling of a <code>callr::r_bg</code> process into a single function, and makes it easier write a larger async-capable <code>shiny</code> app while keeping the code a bit shorter, and more compact.</p>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>I am working on refactoring a relatively large <code>shiny</code> application where many of the computations are time-consuming. Ideally, I would like to convert the major bottlenecks into async routines. Typically, is is done by setting up <code>future/promise</code> constructs or sending a job to a subprocess, keeping the main <code>shiny</code> process free, and then polling the subprocess ‘manually’ to fetch the result (<code>callr</code>/<code>mirai</code>/<code>crew</code>).</p>
<p>After reviewing the available options, and trying a few things, I decided to go with <code>callr</code> for async, although the <code>mirai</code>, and <code>crew</code> where close seconds. This choice was mostly because of <code>callr</code>’s simplicity and because I have <a href="https://discindo.org/post/asynchronous-execution-in-shiny/">previous experience</a> with it.</p>
<p>The <code>callr</code> workflow can be sumarised in the following steps:</p>
<ul>
<li>send a call to the subprocess (possibly within a reactive and dependent on events within <code>shiny</code>)</li>
<li>monitor the status of the background process to know when to fetch the results</li>
<li>the polling observer has to have a switch, so we don’t waste resources on polling while there is nothing running.</li>
</ul>
<p>In all, its probably some 15-20 lines of code, depending on the complexity of the function call we are sending to the subprocess. It looks something like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function we want to run async</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (sleep is added to mimic long computation)</span></span>
<span id="cb1-3">head_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, sleep) {</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(sleep)</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x)</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the r_bg call</span></span>
<span id="cb1-9">args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_six =</span> head_six, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> my_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sleep =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-10">bg_process <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r_bg</span>(</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">func =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(head_six, x, sleep) {</span>
<span id="cb1-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head_six</span>(x, sleep)</span>
<span id="cb1-13">  },</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> args,</span>
<span id="cb1-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">supervise =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turn on polling after the task has been sent to the subprocess</span></span>
<span id="cb1-19">poll_switch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reactive to store the result returned by the subprocess</span></span>
<span id="cb1-22">result_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># monitor the background process</span></span>
<span id="cb1-25">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb1-26">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_switch</span>()))</span>
<span id="cb1-27">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invalidateLater</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checking"</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30">  alive <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_alive</span>()</span>
<span id="cb1-31">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(alive)) {</span>
<span id="cb1-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">res_rct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_result</span>())</span>
<span id="cb1-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"done"</span>)</span>
<span id="cb1-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-35">  }</span>
<span id="cb1-36">})</span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do stuff with `result_rct()`</span></span></code></pre></div>
</div>
<p>Having to write this in 20 different places where async might be needed in an application is definitelly a chore, not to mention error-prone as one needs to keep track of the names of the process objects, polling switches, and result reactives. Then of course, some async bits would need to respond to events, like button clicks or other reactives in the <code>shiny</code> session, while others would need to run without explicit triggers, adding to the complexity and maintanence of the codebase.</p>
</section>
<section id="the-solution" class="level2">
<h2 class="anchored" data-anchor-id="the-solution">The solution</h2>
<p>I wanted to simplify the above process and make it quicker to write the async code. I wanted a function or a module server that would take a function by name and its arguments and then run the function in a background process, poll the process and return the result when ready. Additionally, I wanted this module to be flexible enough such that one can trigger the execution from the outside (e.g., from the parent module) or to run without external triggers.</p>
<p>In the end, I came up with a solution with 3 components: the function that does the long computation, an <em>async</em> version of this function, and a module server that will do the <code>shiny</code> things. Bellow are the 3 parts starting with the trivial <code>head_six</code> function (same as above):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function we want to run async</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (sleep is added to mimic long computation)</span></span>
<span id="cb2-3">head_six <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, sleep) {</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(sleep)</span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x)</span>
<span id="cb2-6">}</span></code></pre></div>
</div>
<p>The async version of the function is a wrapper that is prepared manually for the function we need to run async. It is abstracting the <code>callr::r_bg</code> call, and can live in a separate script (together with the function it wraps) instead of the <code>shiny</code> server. There probably are ways to generate this function with code, and I might try that soon, but for now creating this wrapper does not bother me much. Having an async function that you can test and debug interactivelly might actually be preferred.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Async version of `head_six`</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calls `r_bg` and returns the process object</span></span>
<span id="cb3-3">head_six_async <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, sleep) {</span>
<span id="cb3-4">  args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">head_six =</span> head_six, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sleep =</span> sleep)</span>
<span id="cb3-5">  bg_process <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> callr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r_bg</span>(</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">func =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(head_six, x, sleep) {</span>
<span id="cb3-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head_six</span>(x, sleep)</span>
<span id="cb3-8">    },</span>
<span id="cb3-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> args,</span>
<span id="cb3-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">supervise =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-11">  )</span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(bg_process)</span>
<span id="cb3-13">}</span></code></pre></div>
</div>
<p>The third part is the function (module server) that calls the async version of the function doing the time-consumig task. The module also has reactives to switch polling on/off, and an observer to monitor and fetch the result. It returns a list with two elements, a reactive with the result of the async job, and a function that updates the polling reactive (<code>poll_rct</code>) that allows one to initiate the task from the outside. For example if we had a button in another module that should trigger the computation <em>inside</em> this async module.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mod_async_srv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id, fun_async, fun_args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wait_for_event =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>( id, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session){</span>
<span id="cb4-3">    res_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb4-4">    poll_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(wait_for_event)) {</span>
<span id="cb4-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb4-8">    }</span>
<span id="cb4-9"></span>
<span id="cb4-10">    bg_job <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>({</span>
<span id="cb4-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>()))</span>
<span id="cb4-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(fun_async, fun_args)</span>
<span id="cb4-13">    }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bindEvent</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>())</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observe</span>({</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">req</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>()))</span>
<span id="cb4-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invalidateLater</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)</span>
<span id="cb4-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checking: %s"</span>, id))</span>
<span id="cb4-19"></span>
<span id="cb4-20">      alive <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_alive</span>()</span>
<span id="cb4-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isFALSE</span>(alive)) {</span>
<span id="cb4-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">res_rct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bg_job</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_result</span>())</span>
<span id="cb4-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"done: %s"</span>, id))</span>
<span id="cb4-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb4-25">      }</span>
<span id="cb4-26">    })</span>
<span id="cb4-27"></span>
<span id="cb4-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_job =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">poll_rct</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb4-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get_result =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">res_rct</span>())</span>
<span id="cb4-31">    ))</span>
<span id="cb4-32"></span>
<span id="cb4-33">  })</span>
<span id="cb4-34">}</span></code></pre></div>
</div>
<p>Note that this <em>is not</em> a typical <code>shiny</code> module, in that it does not have (and does not strictly need) a UI part. So we don’t have to worry about the namespace (<code>ns &lt;- session$ns</code>) inside it. We simply want to observe and return. One could add a UI component to, perhaps, notify the user about the progress (checking, checking, … done) of the async job.</p>
<p>With this module, refactoring to async becomes more streamlined. For example, we could have a scenario like this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-2"></span>
<span id="cb5-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># async job triggered on event (input$go_async_job1)</span></span>
<span id="cb5-4">  async_job1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_async_srv</span>(</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"job1_srv"</span>,</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun_async =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"job1_async"</span>,</span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun_args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> z),</span>
<span id="cb5-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wait_for_event =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb5-9">  )</span>
<span id="cb5-10"></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>go_async_job1, {</span>
<span id="cb5-12">    async_job1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">start_job</span>()</span>
<span id="cb5-13">  })</span>
<span id="cb5-14"></span>
<span id="cb5-15">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_fun</span>(async_job1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_result</span>())</span>
<span id="cb5-17">  })</span>
<span id="cb5-18"></span>
<span id="cb5-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># async job that runs without external intervention</span></span>
<span id="cb5-20">  async_job2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mod_async_srv</span>(</span>
<span id="cb5-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"job2_srv"</span>,</span>
<span id="cb5-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun_async =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"job2_async"</span>,</span>
<span id="cb5-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun_args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> b),</span>
<span id="cb5-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wait_for_event =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-25">  )</span>
<span id="cb5-26"></span>
<span id="cb5-27">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPlot</span>({</span>
<span id="cb5-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table_fun</span>(async_job2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_result</span>())</span>
<span id="cb5-29">  })</span>
<span id="cb5-30">}</span></code></pre></div>
</div>
<p>Note that the two instances of <code>mod_async_srv</code> use different async functions with different sets of arguments, and are triggered in different ways. Providing some flexibility, while keeping the server code minimal.</p>
<p>Nothing special here, no magic, just some wrappers to make life a bit easier when writing large <code>shiny</code> applications with async capabilities.</p>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<p>To test out this approach you can download the following <code>gist</code>. In it, I have two <code>callr</code> background async jobs, to show the <code>head</code> of <code>iris</code> and <code>mtcars</code>, with different sleep time. The <code>iris</code> job waits for user click, while the <code>mtcars</code> job runs on its own when the app starts. Neither async job blocks the main <code>shiny</code> process, as they are both in the background, so the slider and histogram work throughout.</p>
<script src="https://gist.github.com/teofiln/7815c3c5197bb231b2188070593029ec.js"></script>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post I went over an approach to organize <code>callr</code> background async jobs using a module, in order to make the async code faster to write, less error prone and overall cleaner.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>shiny</category>
  <category>async programming</category>
  <category>callr</category>
  <guid>https://discindo.org/posts/2024-01-12-an-opiniated-workflow-for-async-shiny-with-callr/</guid>
  <pubDate>Thu, 11 Jan 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>100 days of Python and R</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2023-12-29-100-days-of-python-and-r/</link>
  <description><![CDATA[ 





<p>Today, together with a friend who is looking to get into data analytics, I started doing the <a href="https://replit.com/learn/100-days-of-python">100 days of Python</a> challenge at Replit.</p>
<p>I thought it would be a good idea to do the challenges in <code>R</code>, because why not. :)</p>
<p>So, I am at day 2 (whoohooo I did two challenges in one day), when I notice that <code>Ctrl+Enter</code> for running the code in <code>Python</code> and in <code>R</code> is not the same thing.</p>
<p>Challenge 2 is about user input, so in <code>Python</code> you have something like:</p>
<pre><code>name = input("Your name: ")
email = input("Your email: ")</code></pre>
<p>When running this with <code>Ctrl+Enter</code>, <code>Python</code> prompts for name, and waits. Once name is entered, prompts for email.</p>
<p>In R the equivalent would be:</p>
<pre><code>name &lt;- readline("Your name: ")
email &lt;- readline("Your email: ")</code></pre>
<p>When running this with <code>Ctrl+Enter</code> in Rstudio, <code>R</code> prompts for name, but then enters the next line as the input for the prompt.</p>
<pre><code>&gt; name &lt;- readline("Your name: ")
Your name: email &lt;- readline("Your email: ")</code></pre>
<p>I thought this was strange. I first thought that maybe the Replit environment is configured to work in such a way. But then I got the same behavior running the code in a Jupyter notebook on my computer.</p>
<p>The issue is then on R’s side, or at least Rstudio’s side. When running code with <code>Ctrl+Enter</code>, the code is being entered line by line in the terminal, causing the next line to be entered as input to the first <code>readline()</code>.</p>
<p>However, clicking on the <code>Source</code> button to run the script, produces the behavior experienced with <code>Python</code>: <code>R</code> waits for the user to respond to the prompt, instead of entering the next line as input to the first <code>readline()</code>.</p>
<p>When running this with <code>Ctrl+Enter</code> in VSCode with <code>radian</code> as the <code>R</code> console, <code>R</code> again waits for the user to respond to the prompt.</p>
<p>On to challenge 3. :)</p>



 ]]></description>
  <category>R</category>
  <category>python</category>
  <guid>https://discindo.org/posts/2023-12-29-100-days-of-python-and-r/</guid>
  <pubDate>Thu, 28 Dec 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying Plumber API to AWS Elastic Container Service</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2023-12-28-deploying-plumber-api-to-aws-elastic-container-service/</link>
  <description><![CDATA[ 





<section id="plumber-api-on-ecs-background" class="level2">
<h2 class="anchored" data-anchor-id="plumber-api-on-ecs-background">Plumber API on ECS: Background</h2>
<p>Recently, I started a new position where part of my role is to support colleagues in the final steps of getting a data product out of the door. This will, eventually, involve doing various administrative and development tasks on <a href="https://posit.co/products/enterprise/team/">Posit Team</a>. However, before we can actually get on the Posit Team train, a deadline was looming for deploying a Plumber API. The API runs some simulations about host-parasite interactions in marine fish and is a back-end for a video game that lets users modify parameters, like treatments, to better understand parasite loads and fish biomass. This needed to be tested before making it public.</p>
<p>Getting to the point where even one can think about AWS was no simple task, though. One thing that almost always stands out when seeing <code>R</code> code in the wild is that a lot of things still work in a non-reproducible way. Often with <code>source</code>-ing scripts with hard-coded paths, and setting working directory (<code>setwd()</code>) for setting the correct environment. It seems like <code>R</code> makes it really easy to write code that works, but not necessarily in a production setting.</p>
<p>Of course, this is not novel insight, and is not meant to pile on criticism on <code>R</code> users. Many of them are scientists, statisticians, or researchers whose main priorities are doing science, writing mathematical models, and performing advanced statistical analyses. This is not exactly the same as writing easily deployable code, which requires an altogether different experience and skillset, like reading source code and software documentation, rather than research articles and experimental protocols.</p>
</section>
<section id="always-write-a-package" class="level2">
<h2 class="anchored" data-anchor-id="always-write-a-package">Always write a package</h2>
<p>I started where I usually start when refactoring a project: by converting the scripts into an <code>R</code> package. The benefits of this are documented in <a href="https://r-pkgs.org/">many</a> <a href="https://kbroman.org/pkg_primer/pages/why.html">places</a> <a href="https://www.jumpingrivers.com/blog/personal-r-package/">across</a> the internet, and specifically the topic for <a href="https://community.rstudio.com/t/plumber-api-and-package-structure/18099">adding</a> an API to a <a href="https://www.harveyl888.com/post/2022-11-11_plumber_as_package/">package</a> has popped up a few times as well.</p>
<p>A common pattern for packaging <code>{plumber}</code> code is to write and export functions in the same way one would for a typical <code>R</code> package. Then, after loading the package, the API endpoints simply call exported functions. The API typically lives in <code>inst</code>, so its available as a <code>system.file</code> after installing the package, which is important, and simplifies things with Docker downstream.</p>
<p>All of these considerations were important for this project, since further down the line, people with no particular experience in <code>R</code> needed to test the API (in our case the game developers). And once the package was there it was simple to create a <code>docker</code> image that installs the package, and runs the API with the help of the <a href="https://github.com/ThinkR-open/dockerfiler">dockerfiler</a> package.</p>
</section>
<section id="aws-ecs" class="level2">
<h2 class="anchored" data-anchor-id="aws-ecs">AWS ECS</h2>
<p>However, for a real test of the API we needed to have it public on the internet. Having the <code>docker</code> image ready, I was happy to learn that it is relatively simple to deploy containerized applications on AWS using <a href="https://aws.github.io/copilot-cli/docs/getting-started/first-app-tutorial/">AWS Copilot-cli</a>.</p>
<p>There are some pre-requisites to deploying wit <code>copilot-cli</code>. Of course you need an AWS account. And you should set up your AWS credentials, such as default region and <code>access key</code>. The easiest way to go about this is to use the <code>aws cli</code> to set it up. After <a href="https://aws.amazon.com/cli/">installing</a> the <code>cli</code> for your operating system, running <code>aws configure</code> should prompt you to enter the needed credentials. After you set that up, <code>aws configure list</code> should print the current profile, and you can check that everything is correct.</p>
<p>The next step is to install <code>copilot-cli</code> for your <a href="https://aws.github.io/copilot-cli/docs/getting-started/install/">operating system</a>. The documentation for <code>copilot-cli</code> provides an example app to be deployed. It is a good idea to deploy the <a href="https://aws.github.io/copilot-cli/docs/getting-started/first-app-tutorial/">example</a> just see what you can expect when deploying your container as well.</p>
<p>If you browse through the example repository after the deployment is completed you will see some of the new files that were created by <code>copilot</code>. The <code>example-app</code> folder has a file called <code>manifest.yml</code> which has the details for the app as infrastructure-as-code. Going through this file is useful to understand what is happening behind the scenes.</p>
<p>Deploying the API then was a simple process. Running <code>copilot init</code> in the API repository prompts to answer few questions – the same as in the example. Then <code>copilot</code> sets up the infrastructure and deploys the test environment.</p>
<p>Success! Or so I thought. The first deployment of the API failed.</p>
<p>There were a couple of tweaks that I needed to do.</p>
<p>One, I needed to set up a custom health check path. The “Hello World” endpoint of the API was at ‘/hello’, so I had to correct that in the <code>manifest.yml</code> file.</p>
<p>Two, I needed this API to run over HTTPS, so I had to add <a href="https://aws.github.io/copilot-cli/docs/manifest/lb-web-service/">domain settings</a> to the Load Balanced Web Service. I was lucky enough to have one of those domains-for-a-side-project-I-never-got-to-do lying around, so at least I didn’t have to buy a new domain for this test deployment.</p>
<p>Three, I added Autoscaling to the service, and increased the CPU and Memory size used by the containers. This was a good way to see how the API will handle the tests. All of these changes go into the <code>manifest.yml</code> file.</p>
</section>
<section id="clean-up" class="level2">
<h2 class="anchored" data-anchor-id="clean-up">Clean up</h2>
<p>After the testing was done, removing everything from AWS was a simple thing. Running <code>copilot app delete</code> deletes all the resources that <code>copilot</code> set up for the API. This is great because you don’t have to worry about forgetting some resource which will continue to incur costs on AWS.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This article provides an overview of deploying an R Plumber API in as a containerized application on AWS using <code>copilot-cli</code>.</p>


</section>

 ]]></description>
  <category>AWS</category>
  <guid>https://discindo.org/posts/2023-12-28-deploying-plumber-api-to-aws-elastic-container-service/</guid>
  <pubDate>Wed, 27 Dec 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to deploy Shiny application to Digital Ocean using GitHub Actions</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2023-12-12-how-to-deploy-shiny-application-to-digital-ocean-using-github-actions/</link>
  <description><![CDATA[ 





<section id="shinyproxy-on-digitalocean" class="level2">
<h2 class="anchored" data-anchor-id="shinyproxy-on-digitalocean">ShinyProxy on DigitalOcean</h2>
<p>For the remainder of this walkthrough, I’ll assume that a DigitalOcean droplet running ShinyProxy is already set up. The great people at <a href="https://analythium.io/">Analythium</a> have made setting up an encrypted ShinyProxy server seamless with their 1-click (https://marketplace.digitalocean.com/apps/shinyproxy) application solution. Please follow their tutorials to set this up.</p>
<p>Having said that, this is in no way limited to the Analythium 1-click solution. You can set up a new DigitalOcean server running <a href="https://www.shinyproxy.io/documentation/getting-started/">ShinyProxy from scratch</a>, or adapt the below protocol to different cloud service provider.</p>
</section>
<section id="github-actions-and-digitalocean-setup" class="level2">
<h2 class="anchored" data-anchor-id="github-actions-and-digitalocean-setup">GitHub Actions and DigitalOcean setup</h2>
<p>In this section we’ll set up SSH access on Digital Ocean servers for GH actions:</p>
<ol type="1">
<li>Set up a user for GHActions on the server</li>
</ol>
<p>We can use <code>root</code> to login to the remote server, but its better for GH Actions to run things without root priveledges. So, login to the droplet as user:</p>
<pre><code>ssh root@ip.addr.of.droplet</code></pre>
<p>and run</p>
<pre><code>useradd ghactions</code></pre>
<p>This will create our user and should not prompt for password. The only way to access the server with this user is through <code>ssh keys</code> (see below).</p>
<p>Because the user will most likely require to pull docker images, its also good to add it to the docker user group. This will bypass the requirement for sudo when running docker commands:</p>
<pre><code>sudo usermod -aG docker ghactions
newgrp docker</code></pre>
<ol start="2" type="1">
<li>Create ssh keys for the <code>ghactions</code> user on your local computer</li>
</ol>
<p>On your local machine, we want to create a <em>private-public ssh key pair</em> for our ghactions user. We <em>don’t want to use the personal ssh keys</em>. To do this, we generate the keys in a temporary location:</p>
<pre><code>ssh-keygen -C ghactions -f /tmp/ghactions-keys</code></pre>
<ol start="3" type="1">
<li>Upload the public key to the server</li>
</ol>
<ul>
<li><p>log in as root: <code>ssh root@ip.addr.of.droplet</code></p></li>
<li><p>create <code>.ssh</code> folder for user <code>ghactions</code>: <code>mkdir /home/ghactions/.ssh</code></p></li>
<li><p>create <code>.ssh/authorized_keys</code> file for user <code>ghactions</code>: <code>touch /home/ghactions/.ssh/authorized_keys</code></p></li>
<li><p>change ownership for the ssh config files: <code>chown ghactions:ghactions -R /home/ghactions/.ssh</code></p></li>
<li><p>change permissions for the files: <code>chmod 700 -R /home/ghactions/.ssh</code></p></li>
<li><p>copy paste the public key from your local computer (<code>/tmp/ghactions-keys.pub</code>) to the <code>/home/ghactions/.ssh/authorized_keys</code> file</p></li>
<li><p>disconnect from the server (<code>exit</code> or <code>ctrl+d</code>)</p></li>
<li><p>try connecting as the ghactions user: <code>ssh -i /tmp/ghactions-keys ghactions@ip.addr.of.droplet</code></p></li>
<li><p>if you can log in, the ssh setup should be good to go</p></li>
<li><p>test that you can run <code>docker</code> without <code>sudo</code>: <code>docker run hello-world</code></p></li>
</ul>
<ol start="4" type="1">
<li>Store the private key to the GitHub repository secret</li>
</ol>
<p>This requires <em>admin</em> priveledges on the github repo.</p>
<p>Go to <code>Settings -&gt; Secrets and Variables -&gt; Actions</code> and click <code>New repository secret</code>. Paste the entire contents of your temporary private key, file <code>/tmp/ghactions.keys</code> (including the first and last line</p>
<p><code>-----BEGIN OPENSSH PRIVATE KEY-----</code></p>
<p>and</p>
<p><code>-----END OPENSSH PRIVATE KEY-----</code> ).</p>
<p>Call the secret <code>SSH_PRIVATE_KEY</code>.</p>
<ol start="5" type="1">
<li>Test your github action. A simple action to verify that the GitHub Action runner can access the droplet could be as follows:</li>
</ol>
<pre><code>  on:
    push:
      branches: - dev

  jobs:
    test_gh_to_do_ssh:
      name: test gh to do ssh connection
      runs-on: ubuntu-latest

      steps:
        - name: Create a dummy file on server
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ip.addr.of.droplet
            username: ghactions
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: touch github-actions-made-this-file</code></pre>
<p>If you got no errors, login to the server as user ghactions and check if the file is there. Then delete it.</p>
<ol start="6" type="1">
<li>Delete your local copy of the <em>ssh keys for ghactions user</em></li>
</ol>
<p>If everything went well, you can delete the temporary ssh files you created for the <code>ghactions</code> user: <code>rm /tmp/ghactions-keys /tmp/ghactions-keys.pub</code>.</p>
<p>The private key is safe in github secrets. For added security you could periodically change update the key.</p>
</section>
<section id="docker-container-registry-on-digitalocean" class="level2">
<h2 class="anchored" data-anchor-id="docker-container-registry-on-digitalocean">Docker container registry on DigitalOcean</h2>
<p>One of the components of the deployment workflow is that we have to host our <code>docker</code> images on a remote repository and pull them to the DigitalOcean server. To do this, one can use any Docker registry, including <a href="hub.docker.com">Docker hub</a>, <a href="https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-docker-registry">GitHub’s docker registry</a>. For this post, I’ll use <a href="https://www.digitalocean.com/products/container-registry">DigitalOcean’s container registry solution</a>.</p>
<p>To set this up we simply create a registry for our account or team. Then, to access the registry, we need to generate an access token. For example, by following this <a href="https://docs.digitalocean.com/reference/api/create-personal-access-token/">help page</a></p>
<p>Finally, we need provide this access token as a repository secret to GitHub Actions, because it is needed for the runners to be able to push and pull images. To do this, go <code>Settings -&gt; Secrets and Variables -&gt; Actions</code> and click <code>New repository secret</code>. Paste the access token string and name the secret <code>DIGITALOCEAN_ACCESS_TOKEN</code>.</p>
<p>We are now ready to use the token in our workflow.</p>
</section>
<section id="gh-actions-workflow-for-deployment" class="level2">
<h2 class="anchored" data-anchor-id="gh-actions-workflow-for-deployment">GH Actions workflow for deployment</h2>
<p>The workflow below is fairly straighforward. Mostly calling <code>docker</code> to login, push and pull images. The <code>appleboy/ssh-action@v1.0.0</code> is used to access the DigitalOcean droplet via ssh following our earlier setup of the <code>ghactions</code> user.</p>
<p>In sequence, the steps are:</p>
<ol type="1">
<li>The workflow will run on push to dev. For example after merging a PR for example</li>
<li>Checkout the dev branch</li>
<li>Build a docker image out of it using the Dockerfile included in the repo. For this I used <code>golem::add_dockerfile_shinyproxy()</code></li>
<li>Push the docker image to the DO registry under a tag <code>latest</code>. One can also use a SHA string to tag the image specifically</li>
<li><code>ssh</code> to the droplet using USERNAME@HOST with key <code>SSH_PRIVATE_KEY</code> (as we set it up earlier), The user name and host are hard-coded here, but if necessary they can be set as secrets or variables.</li>
<li>Pull the image using the same tag (the DigitalOcean access token is passed as an environmental variable so the runner has access to the container registry after <code>ssh</code>-ing)</li>
<li>Next time you log in the app ShinyProxy will automatically serve the latest <code>docker</code> image</li>
</ol>
<pre><code>on:
  push:
    branches:
      - dev
jobs:
  deploy_to_dev:
    name: deploy to dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout dev
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Build container image
        run: docker build -t registry.digitalocean.com/myregistry/testgolem:latest .

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: echo ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} | docker login registry.digitalocean.com/myregistry -u $(echo ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}) --password-stdin

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/myregistry/testgolem:latest

      - name: Pull image on DigitalOcean ShinyProxy Server
        uses: appleboy/ssh-action@v1.0.0
        env:
          DO_REGISTRY_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        with:
          host: ip.addr.do.droplet
          username: ghactions
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DO_REGISTRY_TOKEN
          script: |
            echo $DO_REGISTRY_TOKEN | docker login registry.digitalocean.com/myregistry -u $(echo $DO_REGISTRY_TOKEN) --password-stdin
            docker pull registry.digitalocean.com/myregistry/testgolem:latest</code></pre>
</section>
<section id="gist" class="level2">
<h2 class="anchored" data-anchor-id="gist">Gist</h2>
<p>For quick access to the main files visit this gist</p>
<script src="https://gist.github.com/teofiln/d52241797dfc055ed9b9bc96f0c0cb70.js"></script>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This article includes a step-by-step tutorial on setting up automatic deployment of a Shiny application to a DigitalOcean server running ShinyProxy via GitHub Actions.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <category>GitHub Actions</category>
  <category>Digital Ocean</category>
  <category>ShinyProxy</category>
  <guid>https://discindo.org/posts/2023-12-12-how-to-deploy-shiny-application-to-digital-ocean-using-github-actions/</guid>
  <pubDate>Mon, 11 Dec 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use buttons in a Reactable widget for navigation in a Shiny application</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2023-04-04-reactable-buttons/reactable-buttons.html</link>
  <description><![CDATA[ 





<p>How to render and use buttons in tables is a relatively common task faced by <code>{shiny}</code> developers. Commonly, buttons in tables are used for getting more details about a row of data, for opening modal panels for user input, for displaying charts, and of course, for navigation. There are many ways to achieve each of these tasks and many tools to do it with. We can create an HTML table containing buttons from scratch (e.g.&nbsp;<a href="https://discindo.org/post/icons/">here</a>), or we can use table widgets like the ones provided by the <code>{reactable}</code>, <code>{DT}</code> and many other packages. In this post, we’ll introduce a very straightforward way to implement buttons and use them for navigation with the <code>{reactable}</code> package. Most of what you’ll see below is also documented in or derived from the <code>reactable</code> <a href="https://glin.github.io/reactable/articles/examples.html#cell-click-actions">docs</a>.</p>
<section id="putting-buttons-in-a-reactable" class="level1">
<h1>Putting buttons in a <code>{reactable}</code></h1>
<p>To render buttons inside a <a href="https://glin.github.io/reactable/"><code>reactable</code></a> widget we need to make an HTML button tag for each row of the table, and add this column of buttons as column in the data frame we wish to render. We also need to let <code>reactable</code> know that the columns containing our buttons should be interpreted as HTML.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">colA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-2">colB <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">makeButton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(label) {</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span>))))</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8">colC <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>), makeButton))</span>
<span id="cb1-9"></span>
<span id="cb1-10">dataFrame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> colA, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> colB, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> colC)</span>
<span id="cb1-11">reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(dataFrame,</span>
<span id="cb1-12">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-13">                                                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span></code></pre></div>
</div>
</section>
<section id="making-the-buttons-alive" class="level1">
<h1>Making the buttons alive</h1>
<p>For the buttons to respond to our clicks, we need to add an <code>onclick</code> or <code>ondbclick</code> event to each button. To do this, we add the <code>onclick</code> argument to the <code>tags$button</code> tag in our <code>makeButton</code> function. Below, we create an event to each button that will show the id of the button clicked:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">labels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb2-2"></span>
<span id="cb2-3">buttonAlert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(label) {</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span>),</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alert('Button value is: %s')"</span>, label)</span>
<span id="cb2-7">  )))</span>
<span id="cb2-8">}</span>
<span id="cb2-9"></span>
<span id="cb2-10">alertButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(labels, buttonAlert))</span>
<span id="cb2-11"></span>
<span id="cb2-12">tableWithButtons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(</span>
<span id="cb2-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Names =</span> labels,</span>
<span id="cb2-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> alertButtonsHTML</span>
<span id="cb2-16">  ),</span>
<span id="cb2-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb2-19">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-20">  )</span>
<span id="cb2-21">)</span>
<span id="cb2-22"></span>
<span id="cb2-23">tableWithButtons</span></code></pre></div>
</div>
<p>We also have the option to use <code>reactable</code>’s <code>onClick</code> argument, however this requires writing a JavaScript function to figure our which row was clicked and then trigger the appropriate action. In some complex scenarios, such an approach might be necessary, but for this use case, its simple to attach an <code>onclick</code> event to each button when we create the HTML in R.</p>
</section>
<section id="using-the-buttons-to-toggle-tabs" class="level1">
<h1>Using the buttons to toggle tabs</h1>
<p>So far, we rendered a <code>{reactable}</code> with buttons from R, and added events to the buttons such that they trigger an alert in the browser showing the button id. This got us part of the way towards our goal to use the button clicks for navigation in <code>{shiny}</code> To be able to change tabs in a shiny application, we need to send the button id from the browser to the server. We do this with the <code>Shiny.setInputValue</code> JS function as described in the shiny docs on <a href="https://shiny.rstudio.com/articles/communicating-with-js.html">JS to R communication</a>.</p>
<p>Next, we’ll define two columns of buttons, one that trigger an alert like before, and another that sets in input in <code>{shiny}</code>’s session that can be accessed from the server. To show this example we need a full <code>{shiny}</code> application with a tabset panel that we can toggle by clicking the <code>{reactable}</code> buttons. Toggling between tabs happens by the usual <code>updateTabsetPanel</code> in an observer listening to the input updated by the buttons.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">tab_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb3-2"></span>
<span id="cb3-3">buttonSetInput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Go to tab"</span>, nav_value),</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb3-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shiny.setInputValue('%s', '%s', {priority: 'event'})"</span>,</span>
<span id="cb3-8">      nav_id,</span>
<span id="cb3-9">      nav_value</span>
<span id="cb3-10">    )</span>
<span id="cb3-11">  )))</span>
<span id="cb3-12">}</span>
<span id="cb3-13"></span>
<span id="cb3-14">buttonWithAlert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert"</span>, nav_value),</span>
<span id="cb3-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alert('Nav id is: %s, and nav value is: %s')"</span>, nav_id, nav_value)</span>
<span id="cb3-18">  )))</span>
<span id="cb3-19">}</span>
<span id="cb3-20"></span>
<span id="cb3-21">alertButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonWithAlert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>))</span>
<span id="cb3-22">setInputButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonSetInput, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>))</span>
<span id="cb3-23"></span>
<span id="cb3-24">tableWithButtons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(</span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Names =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb3-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> alertButtonsHTML,</span>
<span id="cb3-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> setInputButtonsHTML</span>
<span id="cb3-29">  ),</span>
<span id="cb3-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb3-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb3-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-33">  )</span>
<span id="cb3-34">)</span>
<span id="cb3-35"></span>
<span id="cb3-36">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb3-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootswatch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flatly"</span>),</span>
<span id="cb3-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reactable buttons navigation"</span>,</span>
<span id="cb3-39">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"App navigation with buttons in reactable widget"</span>),</span>
<span id="cb3-40">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb3-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>,</span>
<span id="cb3-42">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb3-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-4"</span>,</span>
<span id="cb3-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTab"</span>),</span>
<span id="cb3-45">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helpText</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input from reactable button is:"</span>),</span>
<span id="cb3-46">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputFromTableButton"</span>),</span>
<span id="cb3-47">      bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navs_tab_card</span>(</span>
<span id="cb3-48">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb3-49">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab A"</span>),</span>
<span id="cb3-50">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab B"</span>),</span>
<span id="cb3-51">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab C"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab C"</span>)</span>
<span id="cb3-52">      )</span>
<span id="cb3-53">    )</span>
<span id="cb3-54">  )</span>
<span id="cb3-55">)</span>
<span id="cb3-56"></span>
<span id="cb3-57">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb3-58">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myTab <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderReactable</span>({</span>
<span id="cb3-59">    tableWithButtons</span>
<span id="cb3-60">  })</span>
<span id="cb3-61"></span>
<span id="cb3-62">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inputFromTableButton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb3-63">    input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav</span>
<span id="cb3-64">  })</span>
<span id="cb3-65"></span>
<span id="cb3-66">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav, {</span>
<span id="cb3-67">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateTabsetPanel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb3-68">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb3-69">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav)</span>
<span id="cb3-70">  })</span>
<span id="cb3-71">}</span>
<span id="cb3-72"></span>
<span id="cb3-73">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
</section>
<section id="but-this-is-not-really-navigation" class="level1">
<h1>But this is not really navigation</h1>
<p>Yes, so far we’ve only toggled tabs on the same page. For this to be ‘navigation’, when we click the buttons in the table we should ‘jump’ from one to another tab. The mechanism to do something like this is essentially the same, except we should render the table <em>within</em> one of our tabs, and then have buttons that lead to other tabs. The example app below is a minor tweak of what we saw earlier to achieve exactly that.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">tab_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-2"></span>
<span id="cb4-3">buttonSetInput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb4-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Go to tab"</span>, nav_value),</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb4-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shiny.setInputValue('%s', '%s', {priority: 'event'})"</span>,</span>
<span id="cb4-8">      nav_id,</span>
<span id="cb4-9">      nav_value</span>
<span id="cb4-10">    )</span>
<span id="cb4-11">  )))</span>
<span id="cb4-12">}</span>
<span id="cb4-13"></span>
<span id="cb4-14">buttonWithAlert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb4-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert"</span>, nav_value),</span>
<span id="cb4-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alert('Nav id is: %s, and nav value is: %s')"</span>, nav_id, nav_value)</span>
<span id="cb4-18">  )))</span>
<span id="cb4-19">}</span>
<span id="cb4-20"></span>
<span id="cb4-21">alertButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonWithAlert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>))</span>
<span id="cb4-22">setInputButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonSetInput, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>))</span>
<span id="cb4-23"></span>
<span id="cb4-24">tableWithButtons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(</span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Names =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb4-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> alertButtonsHTML,</span>
<span id="cb4-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> setInputButtonsHTML</span>
<span id="cb4-29">  ),</span>
<span id="cb4-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb4-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb4-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-33">  )</span>
<span id="cb4-34">)</span>
<span id="cb4-35"></span>
<span id="cb4-36">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb4-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootswatch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flatly"</span>),</span>
<span id="cb4-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reactable buttons navigation"</span>,</span>
<span id="cb4-39">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"App navigation with buttons in reactable widget"</span>),</span>
<span id="cb4-40">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb4-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>,</span>
<span id="cb4-42">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb4-43">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-4"</span>,</span>
<span id="cb4-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helpText</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input from reactable button is:"</span>),</span>
<span id="cb4-45">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputFromTableButton"</span>),</span>
<span id="cb4-46">      bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navs_tab_card</span>(</span>
<span id="cb4-47">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb4-48">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab X"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactableOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTab"</span>)),</span>
<span id="cb4-49">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab A"</span>),</span>
<span id="cb4-50">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab B"</span>),</span>
<span id="cb4-51">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab C"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab C"</span>)</span>
<span id="cb4-52">      )</span>
<span id="cb4-53">    )</span>
<span id="cb4-54">  )</span>
<span id="cb4-55">)</span>
<span id="cb4-56"></span>
<span id="cb4-57">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb4-58">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myTab <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderReactable</span>({</span>
<span id="cb4-59">    tableWithButtons</span>
<span id="cb4-60">  })</span>
<span id="cb4-61">  </span>
<span id="cb4-62">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inputFromTableButton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb4-63">    input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav</span>
<span id="cb4-64">  })</span>
<span id="cb4-65">  </span>
<span id="cb4-66">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav, {</span>
<span id="cb4-67">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateTabsetPanel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb4-68">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb4-69">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav)</span>
<span id="cb4-70">  })</span>
<span id="cb4-71">}</span>
<span id="cb4-72"></span>
<span id="cb4-73">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
</section>
<section id="what-if-we-used-modules" class="level1">
<h1>What if we used modules?</h1>
<p>In a realistic app, we would probably use <a href="https://shiny.rstudio.com/articles/modules.html">shiny modules</a>. We could easily construct a scenario where the <code>reactable</code> is rendered through a module, or where each tab is a separate module. The pattern we described above works in this case too, except, with modules, we have keep track of the namespaces. Modules are isolated, so an input value updated in module X will not be known to module Y. We have to implement some way of communication between modules.</p>
<p>Below is one of several ways to send a message from one module to another. In this, case we pass a value from a ‘submodule’ to the calling module. This is a common case, for example, we have the main app server with top-level navigation, that is calling modules for ‘pages’ within the application. The key is to return the input updated by the submodule as a reactive that can be observed in the top-level module.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">tab_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb5-2"></span>
<span id="cb5-3">buttonSetInput <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Go to tab"</span>, nav_value),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb5-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shiny.setInputValue('%s', '%s', {priority: 'event'})"</span>,</span>
<span id="cb5-8">      nav_id,</span>
<span id="cb5-9">      nav_value</span>
<span id="cb5-10">    )</span>
<span id="cb5-11">  )))</span>
<span id="cb5-12">}</span>
<span id="cb5-13"></span>
<span id="cb5-14">buttonWithAlert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(nav_id, nav_value) {</span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert"</span>, nav_value),</span>
<span id="cb5-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">onClick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alert('Nav id is: %s, and nav value is: %s')"</span>, nav_id, nav_value)</span>
<span id="cb5-18">  )))</span>
<span id="cb5-19">}</span>
<span id="cb5-20"></span>
<span id="cb5-21">rTabUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-22">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactableOutput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTab"</span>))</span>
<span id="cb5-25">  )</span>
<span id="cb5-26">}</span>
<span id="cb5-27"></span>
<span id="cb5-28">rTabServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb5-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb5-30">    id,</span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-32">      ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> session<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ns</span>
<span id="cb5-33">      </span>
<span id="cb5-34">      alertButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonWithAlert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>)))</span>
<span id="cb5-35">      setInputButtonsHTML <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(tab_names, buttonSetInput, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nav_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myNav"</span>)))</span>
<span id="cb5-36">      </span>
<span id="cb5-37">      tableWithButtons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactable</span>(</span>
<span id="cb5-38">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-39">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Names =</span> LETTERS[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb5-40">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> alertButtonsHTML,</span>
<span id="cb5-41">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> setInputButtonsHTML</span>
<span id="cb5-42">        ),</span>
<span id="cb5-43">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-44">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Alert =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb5-45">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">SetInput =</span> reactable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colDef</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sortable =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">html =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-46">        )</span>
<span id="cb5-47">      )</span>
<span id="cb5-48">      </span>
<span id="cb5-49">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myTab <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderReactable</span>({</span>
<span id="cb5-50">        tableWithButtons</span>
<span id="cb5-51">      })</span>
<span id="cb5-52">      </span>
<span id="cb5-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-54">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">getButtonValue =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactive</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>myNav)</span>
<span id="cb5-55">      ))</span>
<span id="cb5-56">    }</span>
<span id="cb5-57">  )</span>
<span id="cb5-58">}</span>
<span id="cb5-59"></span>
<span id="cb5-60"></span>
<span id="cb5-61">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb5-62">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bootswatch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flatly"</span>),</span>
<span id="cb5-63">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reactable buttons navigation"</span>,</span>
<span id="cb5-64">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titlePanel</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"App navigation with buttons in reactable widget"</span>),</span>
<span id="cb5-65">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>,</span>
<span id="cb5-67">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb5-68">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-4"</span>,</span>
<span id="cb5-69">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helpText</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input from reactable button is:"</span>),</span>
<span id="cb5-70">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputFromTableButton"</span>),</span>
<span id="cb5-71">      bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navs_tab_card</span>(</span>
<span id="cb5-72">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb5-73">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab X"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rTabUI</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtab"</span>) ),</span>
<span id="cb5-74">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab A"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab A"</span>),</span>
<span id="cb5-75">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab B"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab B"</span>),</span>
<span id="cb5-76">        bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab C"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Contents of tab C"</span>)</span>
<span id="cb5-77">      )</span>
<span id="cb5-78">    )</span>
<span id="cb5-79">  )</span>
<span id="cb5-80">)</span>
<span id="cb5-81"></span>
<span id="cb5-82">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb5-83">  </span>
<span id="cb5-84">  rTabOut <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rTabServer</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtab"</span>)</span>
<span id="cb5-85">  </span>
<span id="cb5-86">  output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>inputFromTableButton <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderPrint</span>({</span>
<span id="cb5-87">    rTabOut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getButtonValue</span>()</span>
<span id="cb5-88">  })</span>
<span id="cb5-89">  </span>
<span id="cb5-90">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(rTabOut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getButtonValue</span>(), {</span>
<span id="cb5-91">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">updateTabsetPanel</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">session =</span> session,</span>
<span id="cb5-92">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myTabs"</span>,</span>
<span id="cb5-93">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">selected =</span> rTabOut<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getButtonValue</span>())</span>
<span id="cb5-94">  })</span>
<span id="cb5-95">}</span>
<span id="cb5-96"></span>
<span id="cb5-97">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>Other ways to implement communication between modules include passing (reactive) values through <code>session$userData</code> (e.g.&nbsp;<a href="https://appsilon.com/super-solutions-for-shiny-architecture-1-of-5-using-session-data/">here</a>) or updating values in an environment or <code>R6</code> class passed to each module as an argument (e.g.&nbsp;<a href="https://github.com/ColinFay/golemexamples/tree/master/golemR6">here</a>).</p>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>In this post we covered some examples of how one could implement navigation between ‘pages’ in a <code>{shiny}</code> application using buttons in a <code>reactable</code>. We saw how to generate some buttons, how to update input values on button click, how to listen to changes from the buttons, and how to pass the user selections between modules.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <guid>https://discindo.org/posts/2023-04-04-reactable-buttons/reactable-buttons.html</guid>
  <pubDate>Mon, 03 Apr 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use Bootstrap 5 popovers in Shiny applications</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2023-04-01-bs5-popovers/</link>
  <description><![CDATA[ 





<p>Creating custom user interfaces with <code>{shiny}</code> and <code>{bslib}</code> has never been easier. Using <code>{bslib}</code> it is also incredibly simple to choose and switch between versions of the underlying <a href="https://getbootstrap.com">Bootstrap</a> library that powers the UI, to use many of the <a href="https://bootswatch.com/">Bootswatch</a> themes, and to create <a href="https://rstudio.github.io/bslib/articles/custom-components.html">custom components</a>.</p>
<p>One useful and commonly requested application feature are tooltips or popovers. These offer more detailed information or documentation to the user without cluttering the UI with text. Historically, there have been some great packages that provide this functionality, for example <a href="https://github.com/ebailey78/shinyBS"><code>{shinyBS}</code></a>, and <a href="https://github.com/ijlyttle/bsplus"><code>{bsplus}</code></a>. However, there are some known incompatibilities with newer versions of Bootstrap, and in many cases we don’t necessarily want to add these dependencies to our projects.</p>
<section id="bootstrap-5-in-shiny" class="level1">
<h1>Bootstrap 5 in Shiny</h1>
<p>Using Bootstrap 5 in <code>{shiny}</code> with <code>{bslib}</code> is as easy as:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb1-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>,</span>
<span id="cb1-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-4">)</span></code></pre></div>
<p>And adding a simple white text on dark background tooltip to an element of our page is as easy as adding a <code>title</code> attribute:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb2-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>,</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb2-4">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a welcome message"</span>)</span>
<span id="cb2-5">)</span>
<span id="cb2-6"></span>
<span id="cb2-7">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output) {}</span>
<span id="cb2-8"></span>
<span id="cb2-9">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
<p>However, if we wanted to use the nice Bootstrap popovers, that can be shown by clicking or hovering on an icon, we’d be a little disappointed. These don’t come by default with Bootstrap 5, and they require a bit of prep work before we can add them to our application.</p>
</section>
<section id="bootstrap-5-popovers-in-shiny" class="level1">
<h1>Bootstrap 5 popovers in Shiny</h1>
<p>The requirements to enable popovers in Bootstrap 5 are well documented. Bootstrap 5 uses the <a href="https://popper.js.org/">Popper</a> JavaScript library, so we have to opt-in to use them, i.e., add the Popper JS library as a dependency. To enable them everywhere in an application, we can simply include the code provided in the bootstrap documentation in our application.</p>
<p>To do this in <code>{shiny}</code>, we need to define a JS callback function that will work when the HTML document is ready, along the lines of:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// popovers.js</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>( <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span> )<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ready</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> popoverTriggerList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slice</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">document</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">querySelectorAll</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[data-bs-toggle="popover"]'</span>))</span>
<span id="cb3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">var</span> popoverList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> popoverTriggerList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> (popoverTriggerEl) {</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">new</span> bootstrap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Popover</span>(popoverTriggerEl)</span>
<span id="cb3-7">    })</span>
<span id="cb3-8">    </span>
<span id="cb3-9">  })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Save this function to a file, say <code>popovers.js</code> and include it in our UI via <code>htmltools::includeScript</code> (or some other way described in the <a href="https://shiny.rstudio.com/articles/packaging-javascript.html"><code>{shiny}</code> docs</a>) To test our setup right away, we’ll also add a button that when clicked would open a popover.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"></span>
<span id="cb4-2">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb4-3">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includeScript</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popovers.js"</span>),</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>,</span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb4-6">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a welcome message"</span>),</span>
<span id="cb4-7">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb4-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span>,</span>
<span id="cb4-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-toggle</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popover"</span>,</span>
<span id="cb4-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb4-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-content</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Click me"</span></span>
<span id="cb4-12">    )</span>
<span id="cb4-13">)</span>
<span id="cb4-14"></span>
<span id="cb4-15">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output) {}</span>
<span id="cb4-16"></span>
<span id="cb4-17">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
<p>And we are done with the basic setup. We have a functional Bootstrap 5 popover in <code>{shiny}</code> without adding any <code>R</code> dependencies. Next, we’ll make a few minor improvements for ease of use and functionality.</p>
<p>The default behavior of the popovers is that they are dismissed the next time we click the button (or icon) that triggered them. This is not that great, because sometimes the icons can be small, or even hidden by the popover it self, so it might be hard to click and dismiss the popover. To aleviate this, we can set the popovers to show up on hover by adding a <code>data-bs-trigger</code> = “hover” attibute.</p>
<p>Finally, there is some CSS conflict between <code>{shiny}</code> and the styling of the Bootstrap 5 popovers, which causes some unecessary padding on top of the popover title. We can remove this by forcing the top-margin on the <code>h3</code> tag to zero. Similar to before, we can add this bit of CSS to a file and include this file as a resource in the <code>{shiny}</code> app using <code>htmltools::includeCSS</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Popover title conflict */</span></span>
<span id="cb5-2">h3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.h3</span> {</span>
<span id="cb5-3">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">margin-top</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">!important</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-4">}</span></code></pre></div>
<p>With these improvements, our basic example shiny app becomes:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"></span>
<span id="cb6-2">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">page_fluid</span>(</span>
<span id="cb6-3">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includeScript</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popovers.js"</span>),</span>
<span id="cb6-4">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">includeCSS</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popovers.css"</span>),</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>,</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theme =</span> bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bs_theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">version =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb6-7">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a welcome message"</span>),</span>
<span id="cb6-8">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">button</span>(</span>
<span id="cb6-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"button"</span>,</span>
<span id="cb6-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-toggle</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popover"</span>,</span>
<span id="cb6-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-trigger</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hover"</span>,</span>
<span id="cb6-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb6-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-content</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Click me"</span></span>
<span id="cb6-14">    )</span>
<span id="cb6-15">)</span>
<span id="cb6-16"></span>
<span id="cb6-17">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output) {}</span>
<span id="cb6-18"></span>
<span id="cb6-19">shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ui =</span> ui, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">server =</span> server)</span></code></pre></div>
</section>
<section id="popovers-in-shiny-inputs-labels-and-tab-names" class="level1">
<h1>Popovers in Shiny inputs labels and tab names</h1>
<p>The most common places where popovers are useful are next to inputs and tab names. These help with user experience by providing guidance and information. To create inputs and tab names with popovers, we’ll write a function that creates icons with the popover functionality we discussed above.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">titleWithPopover <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(title, popover_title, popover_body) {</span>
<span id="cb7-2">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(</span>
<span id="cb7-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d-flex justify-content-between align-items-center"</span>,</span>
<span id="cb7-4">        title,</span>
<span id="cb7-5">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon</span>(</span>
<span id="cb7-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle-info"</span>,</span>
<span id="cb7-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cursor: pointer;"</span>,</span>
<span id="cb7-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-toggle</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"popover"</span>,</span>
<span id="cb7-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-trigger</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hover"</span>,</span>
<span id="cb7-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> popover_title,</span>
<span id="cb7-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data-bs-content</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> popover_body</span>
<span id="cb7-12">        )</span>
<span id="cb7-13">    )</span>
<span id="cb7-14">}</span></code></pre></div>
<p>In the above function, we create a <code>span</code> with some text aligned to the left, and an icon aligned to the right, clicking on the icon will trigger the popover. Then, to use this tag as a <code>label</code> of a shiny input, we set the input’s <code>label</code> argument to <code>NULL</code> and provide our customized label (select input example). Alternatively, we can omit the separate label altogether, and add the icon with popover to the right of an input, as would make sense for inputs that have a placeholder value (text input example).</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>,</span>
<span id="cb8-3">    htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(</span>
<span id="cb8-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col-3"</span>,</span>
<span id="cb8-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titleWithPopover</span>(</span>
<span id="cb8-6">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Select a value"</span>,</span>
<span id="cb8-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb8-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span></span>
<span id="cb8-9">        ),</span>
<span id="cb8-10">        shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb8-11">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"someValue"</span>,</span>
<span id="cb8-12">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-13">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb8-14">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span></span>
<span id="cb8-15">        ),</span>
<span id="cb8-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titleWithPopover</span>(</span>
<span id="cb8-17">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">textInput</span>(</span>
<span id="cb8-18">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textInput"</span>,</span>
<span id="cb8-19">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb8-20">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"60%"</span>,</span>
<span id="cb8-21">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">placeholder =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter some text"</span></span>
<span id="cb8-22">            ),</span>
<span id="cb8-23">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb8-24">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span></span>
<span id="cb8-25">        )</span>
<span id="cb8-26">    )</span>
<span id="cb8-27">)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/post/2023-04-01-bs5-popovers/screengrab1.png" class="img-fluid figure-img"></p>
<figcaption>Shiny inputs with icons for popover</figcaption>
</figure>
</div>
<p>Our <code>titleWithPopover</code> function can easily be applied in other contexts too. For example, we can create a tabset panel with tabs whose names are embelished with icons and popovers.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navs_pill_list</span>(</span>
<span id="cb9-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">well =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb9-3">    bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titleWithPopover</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab One"</span>,</span>
<span id="cb9-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb9-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span></span>
<span id="cb9-6">    ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text One"</span>),</span>
<span id="cb9-7">    bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titleWithPopover</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab Two"</span>,</span>
<span id="cb9-8">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb9-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span></span>
<span id="cb9-10">    ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text Two"</span>),</span>
<span id="cb9-11">    bslib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nav</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">titleWithPopover</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tab Three"</span>,</span>
<span id="cb9-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover title"</span>,</span>
<span id="cb9-13">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">popover_body =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popover body"</span></span>
<span id="cb9-14">    ), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text Three"</span>)</span>
<span id="cb9-15">)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://discindo.org/post/2023-04-01-bs5-popovers/screengrab2.png" class="img-fluid figure-img"></p>
<figcaption>Nav item titles with icons for popover</figcaption>
</figure>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>In this post, we went over the simple procedure to enable Bootstrap 5 popovers in a <code>{shiny}</code> application by using bits of JS and CSS for <code>popper.js</code>. We also discussed some example usage of the popovers in input labels and tab names.</p>
</section>
<section id="gist" class="level1">
<h1>Gist</h1>
<p>The code for a functional shiny app with popover examples is available at the following gist.</p>
<script src="https://gist.github.com/teofiln/38b09ad2c01bea576dabea659f857bcb.js"></script>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <guid>https://discindo.org/posts/2023-04-01-bs5-popovers/</guid>
  <pubDate>Fri, 31 Mar 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Data wrangling tricks from the R4DS slack</title>
  <dc:creator>novica </dc:creator>
  <link>https://discindo.org/posts/2023-03-27-data-wrangling-tricks-from-the-r4ds-slack/</link>
  <description><![CDATA[ 





<p>Every now and then there is a question on the <a href="https://www.rfordatasci.com/">R4DS slack</a> that produces a large number of replies. This case was particularly interesting because the user that had the issue deleted all the original content, the question, the clarifications and so on.</p>
<p>I thought it would be interesting to document this, because it may be useful to other people.</p>
<p>The question was posted with regards to some genes data, and the task was to filter out some of the genes that have missing values. But generally speaking the question can be summarized like this:</p>
<p><em>How to filter a dataset in a such way that all observations from a group are dropped if the group doesn’t meet certain criteria?</em></p>
<p>These are our sample data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">groups =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb1-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">features =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>),</span>
<span id="cb1-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb1-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb1-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">dat</span></code></pre></div>
</div>
<p>We want to keep only <code>group a</code> since it is the only one where none of the observations have missing data.</p>
<p>There is a case of complete observations in <code>group c</code> as well, but it is only one (on row 7), so we don’t want to keep that group.</p>
<p>A simple pipeline to do this would be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb2-3"></span>
<span id="cb2-4">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(groups) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>After providing this solution, I thought about the different scenarios where a similar recipe may be needed. For example, what if the data is too big and, <code>data.table</code> would be preferred? Or what if the pipeline should be part of a bigger project using <code>python</code> for example?</p>
<section id="more-r" class="level2">
<h2 class="anchored" data-anchor-id="more-r">More R</h2>
<p>So here are the possible solutions with other libraries. First <code>data.table</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb3-2"></span>
<span id="cb3-3">dat_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDT</span>(dat)</span>
<span id="cb3-4"></span>
<span id="cb3-5">dat_grp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb3-6">  dat_dt[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(dat_dt),][, .N, by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> groups][N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb3-7"></span>
<span id="cb3-8">dt_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dat_dt[dat_grp, on <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groups"</span>]</span>
<span id="cb3-9"></span>
<span id="cb3-10">dt_result</span></code></pre></div>
</div>
<p>Most of the time I find <code>data.table</code> unreadable, and luckily, a <code>tidytable</code> solution is also possible.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">dat <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-2">  tidytable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-3">  tidytable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(groups) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb4-4">  tidytable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
</section>
<section id="python" class="level2">
<h2 class="anchored" data-anchor-id="python">Python</h2>
<p>On to <code>python</code>. Here is a simple chain in <code>pandas</code> that does the same.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"></span>
<span id="cb5-3">dat_py <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.dat</span>
<span id="cb5-4"></span>
<span id="cb5-5">(dat_py.dropna(axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"any"</span>)</span>
<span id="cb5-6">.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"groups"</span>)</span>
<span id="cb5-7">.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
</div>
<p>The interesting bit is that <code>drop_na()</code> and <code>dropna()</code> behave differently. In <a href="https://tidyr.tidyverse.org/reference/drop_na.html">tidyr</a>, the function assumes that it is checking all of the columns by default, while in <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html">pandas</a> arguments have to be called to check if any of the columns have missing values.</p>
</section>
<section id="sql" class="level2">
<h2 class="anchored" data-anchor-id="sql">SQL</h2>
<p>And, how about some <code>SQL</code>? It is possible, of course, that your data may be in a database and not in a flat file. Here is a <code>sqlite</code> solution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb6-2"></span>
<span id="cb6-3">con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(RSQLite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SQLite</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":memory:"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(con, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dat"</span>, dat)</span>
<span id="cb6-6"></span>
<span id="cb6-7">query <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT t1.* FROM dat AS t1</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">INNER JOIN (</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT groups, COUNT(*) as cnt</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM dat</span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    WHERE col1 IS NOT NULL AND col2 IS NOT NUll AND col3 IS NOT NULL</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    GROUP BY groups</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">) AS t2</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ON t1.groups = t2.groups</span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE t2.cnt = 3;"</span></span>
<span id="cb6-16">  </span>
<span id="cb6-17">res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbSendQuery</span>(con, query)</span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbFetch</span>(res)</span></code></pre></div>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>This was a quick post that provides answers with different tools to the question: How to filter a dataset in a such way that all observations from a group are dropped if the group doesn’t meet certain criteria?</p>
<p>We saw how to do it in <code>tidyverse</code> and in <code>data.table</code>. What is missing is <code>base R</code>. Sorry about that! However there are solutions in <code>pandas</code> and <code>SQL</code>. Hopefully something can be useful to somebody.</p>


</section>

 ]]></description>
  <category>R</category>
  <guid>https://discindo.org/posts/2023-03-27-data-wrangling-tricks-from-the-r4ds-slack/</guid>
  <pubDate>Sun, 26 Mar 2023 22:00:00 GMT</pubDate>
</item>
<item>
  <title>How to use custom icons in Rmd reports and Shiny applications</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2023-03-19-icons/</link>
  <description><![CDATA[ 





<p>Creating custom HTML tables with icons can be a great way to display data. In some cases, like when we have a few, heterogeneous data points, it is better than creating charts or using feature-rich table widgets that come with a lot of dependencies (e.g., <code>{reactable}</code>, <code>{DT}</code>, and similar).</p>
<p>In a recent project, I worked on a <code>{shiny}</code> application that displays a custom, static, <code>HTML</code> table with some icons. For this project we needed some icons available through the <a href="https://github.com/mitchelloharawild/icons"><code>{icons}</code></a> <code>R</code> package. Below is a quick tutorial about how to use <code>{htmltools}</code> and <code>{icons}</code> to create tables with icons, and how to use the icons for Rmd HTML reports and <code>{shiny}</code> applications.</p>
<section id="dependencies" class="level2">
<h2 class="anchored" data-anchor-id="dependencies">Dependencies</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"htmltools"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possibly unnecessary</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mitchelloharawild/icons"</span>)</span></code></pre></div>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>For the type of table we are creating here, we want a few data points of different types. For example, if we had to display personal and social media information in a tabular format, we could have something like the list below. We have one person, “Jaime” and we record information about their age, hobby, and twitter account:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">jaime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime"</span>,</span>
<span id="cb2-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Researcher"</span>,</span>
<span id="cb2-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Twitter =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime123"</span>,</span>
<span id="cb2-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Hobby =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Football"</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">jaime</span></code></pre></div>
</div>
<p>For now, we’ll work only with this one person list, but you can imagine having many such items in a data frame and indexing this data frame to display data.</p>
</section>
<section id="icons" class="level2">
<h2 class="anchored" data-anchor-id="icons">Icons</h2>
<p>For icons, we’ll use the <code>{icons}</code> package. We’ll work with <code>fontawesome</code> icons, but with the <code>{icons}</code> package, we have several other options too:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(icons)</span></code></pre></div>
</div>
<p>Downloading icon sets is simple, we use <code>icons::download_*</code>, and the resulting object is an <code>icon_set</code> class that we can pass an icon name to obtain the SVG of the icon:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">download_fontawesome</span>()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fontawesome</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twitter"</span>)</span></code></pre></div>
</div>
</section>
<section id="html-table-with-icons" class="level2">
<h2 class="anchored" data-anchor-id="html-table-with-icons">HTML table with icons</h2>
<p>First, we add icons to our person list. We convert each item to a list with two slots, <code>text</code> and <code>icon</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">jaime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>),</span>
<span id="cb6-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Researcher"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flask"</span>),</span>
<span id="cb6-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Twitter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime123"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twitter"</span>),</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Hobby =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Football"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"futbol"</span>)</span>
<span id="cb6-7">  )</span></code></pre></div>
</div>
<p>Next, we’ll use this list of item lists to generate the HTML for our table:</p>
<ul>
<li>We define some CSS styles for the <code>th</code> and <code>td</code> tags</li>
<li>We use <code>lapply</code> to cycle over the elements of our person list <code>jaime</code> to generate rows (<code>tr</code> + <code>td</code>) tags for each item</li>
<li>We wrap the row_tags in a table tag (<code>tags$table</code>)</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-align: left; padding: 10px 25px;"</span></span>
<span id="cb7-2">row_tags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(jaime,</span>
<span id="cb7-3">                   <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb7-4">                     htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span>(</span>
<span id="cb7-5">                       htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">td</span>(</span>
<span id="cb7-6">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style,</span>
<span id="cb7-7">                         icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon_style</span>(</span>
<span id="cb7-8">                           icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fontawesome</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icon"</span>]]),</span>
<span id="cb7-9">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>,</span>
<span id="cb7-10">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5E81AC"</span></span>
<span id="cb7-11">                         )</span>
<span id="cb7-12">                       ),</span>
<span id="cb7-13">                       htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">td</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style, x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>]])</span>
<span id="cb7-14">                     )</span>
<span id="cb7-15">                   })</span>
<span id="cb7-16"></span>
<span id="cb7-17">container_style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    border: 0.5px solid #5E81AC; </span></span>
<span id="cb7-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    width: 50%; </span></span>
<span id="cb7-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    padding: 20px; </span></span>
<span id="cb7-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    display: flex; </span></span>
<span id="cb7-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    justify-content: center;"</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">table_with_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> container_style,</span>
<span id="cb7-25">               htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(</span>
<span id="cb7-26">                 htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span>(</span>
<span id="cb7-27">                   htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">th</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Icon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style),</span>
<span id="cb7-28">                   htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">th</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style)</span>
<span id="cb7-29">                 ),</span>
<span id="cb7-30">                 row_tags</span>
<span id="cb7-31">               ))</span>
<span id="cb7-32">table_with_icons</span></code></pre></div>
</div>
</section>
<section id="application-in-a-parametrized-report-or-a-shiny-application" class="level1">
<h1>Application in a parametrized report or a Shiny application</h1>
<p>To use our table with icons in a Rmd report or shiny application, we need to wrap it into a function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">make_table_w_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(person_list) {</span>
<span id="cb8-2">  style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text-align: left; padding: 10px 25px;"</span></span>
<span id="cb8-3">  row_tags <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(person_list,</span>
<span id="cb8-4">                     <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb8-5">                       htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span>(</span>
<span id="cb8-6">                         htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">td</span>(</span>
<span id="cb8-7">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style,</span>
<span id="cb8-8">                           icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon_style</span>(</span>
<span id="cb8-9">                             icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fontawesome</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icon"</span>]]),</span>
<span id="cb8-10">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>,</span>
<span id="cb8-11">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#5E81AC"</span></span>
<span id="cb8-12">                           )</span>
<span id="cb8-13">                         ),</span>
<span id="cb8-14">                         htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">td</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style, x[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>]])</span>
<span id="cb8-15">                       )</span>
<span id="cb8-16">                     })</span>
<span id="cb8-17">  </span>
<span id="cb8-18">  container_style <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb8-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    border: 0.5px solid #5E81AC;</span></span>
<span id="cb8-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    width: 50%;</span></span>
<span id="cb8-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    padding: 20px;</span></span>
<span id="cb8-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    display: flex;</span></span>
<span id="cb8-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    justify-content: center;"</span></span>
<span id="cb8-24">  </span>
<span id="cb8-25">  table_with_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">div</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> container_style,</span>
<span id="cb8-26">                                     htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(</span>
<span id="cb8-27">                                       htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span>(</span>
<span id="cb8-28">                                         htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">th</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Icon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style),</span>
<span id="cb8-29">                                         htmltools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tags<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">th</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">style =</span> style)</span>
<span id="cb8-30">                                       ),</span>
<span id="cb8-31">                                       row_tags</span>
<span id="cb8-32">                                     ))</span>
<span id="cb8-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(table_with_icons)</span>
<span id="cb8-34">}</span>
<span id="cb8-35"></span>
<span id="cb8-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_table_w_icons</span>(jaime)</span></code></pre></div>
</div>
<p>We can now create a simple <code>{shiny}</code> application that displays our person data with icons.</p>
<section id="shiny-module" class="level2">
<h2 class="anchored" data-anchor-id="shiny-module">Shiny module</h2>
<p>A simple <code>{shiny}</code> module that uses server-side rendering to make the <code>HTML</code> table. The server defines a reactive value <code>person_rct</code> that we use to create the table. The <code>set_person</code> function returned by the module server is used by the calling module to supply the person data (see the next section).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">tableWithIconsUI <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb9-2">  ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NS</span>(id)</span>
<span id="cb9-3">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tagList</span>(</span>
<span id="cb9-4">    shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uiOutput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ns</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab"</span>))</span>
<span id="cb9-5">  )</span>
<span id="cb9-6">}</span>
<span id="cb9-7"></span>
<span id="cb9-8">tableWithIconsServer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(id) {</span>
<span id="cb9-9">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moduleServer</span>(</span>
<span id="cb9-10">    id,</span>
<span id="cb9-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb9-12">      </span>
<span id="cb9-13">      person_rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reactiveVal</span>()</span>
<span id="cb9-14">      </span>
<span id="cb9-15">      output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tab <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">renderUI</span>({</span>
<span id="cb9-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make_table_w_icons</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">person_list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person_rct</span>())</span>
<span id="cb9-17">      })</span>
<span id="cb9-18">      </span>
<span id="cb9-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb9-20">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set_person =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb9-21">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">person_rct</span>(x)</span>
<span id="cb9-22">        }</span>
<span id="cb9-23">        </span>
<span id="cb9-24">      ))</span>
<span id="cb9-25">    }</span>
<span id="cb9-26">  )</span>
<span id="cb9-27">}</span></code></pre></div>
</div>
</section>
<section id="shiny-app" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app">Shiny app</h2>
<p>For our application, we define another person (Jessica) and let the user choose a person with a <code>selectInput</code>. Then the server observes this input, indexes the <code>person_list</code> data object, and passes the person data list to the <code>tableWithIcons</code> module.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(shiny)</span>
<span id="cb10-2"></span>
<span id="cb10-3">jaime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>),</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Researcher"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flask"</span>),</span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Twitter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime123"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twitter"</span>),</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Hobby =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Football"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"futbol"</span>)</span>
<span id="cb10-9">  )</span>
<span id="cb10-10"></span>
<span id="cb10-11">jessica <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>),</span>
<span id="cb10-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Position =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Researcher"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flask"</span>),</span>
<span id="cb10-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Twitter =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IamJessica"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twitter"</span>),</span>
<span id="cb10-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Hobby =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fishing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icon =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fish"</span>)</span>
<span id="cb10-16">)</span>
<span id="cb10-17"></span>
<span id="cb10-18">persons_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Jaime =</span> jaime,</span>
<span id="cb10-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Jessica =</span> jessica</span>
<span id="cb10-21">)</span>
<span id="cb10-22"></span>
<span id="cb10-23">ui <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fluidPage</span>(</span>
<span id="cb10-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">selectInput</span>(</span>
<span id="cb10-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inputId =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span>,</span>
<span id="cb10-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb10-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">choices =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jaime"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jessica"</span>)</span>
<span id="cb10-28">  ),</span>
<span id="cb10-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableWithIconsUI</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab1"</span>)</span>
<span id="cb10-30">)</span>
<span id="cb10-31"></span>
<span id="cb10-32">server <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(input, output, session) {</span>
<span id="cb10-33">  tab1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tableWithIconsServer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tab1"</span>)</span>
<span id="cb10-34">  </span>
<span id="cb10-35">  shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>person, {</span>
<span id="cb10-36">    person_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> person_list[[input<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>person]]</span>
<span id="cb10-37">    tab1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_person</span>(person_data)</span>
<span id="cb10-38">  })</span>
<span id="cb10-39">}</span>
<span id="cb10-40"></span>
<span id="cb10-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
</section>
<section id="creating-an-icon-set" class="level2">
<h2 class="anchored" data-anchor-id="creating-an-icon-set">Creating an icon set</h2>
<p>If you followed along and run the code, you’ll probably be able to run the application without errors. However, if we were to deploy such an application, we would get an error because by default, our deployment would only install the <code>{icons}</code> package, but not also download the required icon set. We could include a <code>download_fontawesome</code> in our <code>server</code> or <code>global</code> file, but that would mean downloading the icons on every deployment or session start, neither of which is desirable.</p>
<p>The solution is to create an icon set and store that as an asset to our application. Then we would deploy this asset with our application, and instead of downloading the full set of icons, we would only load the SVGs for the icons we use in our application.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">needed_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(persons_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Jaime, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icon"</span>),</span>
<span id="cb11-2">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(persons_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Jessica, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"icon"</span>)</span>
<span id="cb11-3">                  )</span>
<span id="cb11-4">needed_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(needed_icons)</span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requires that folder `icons` exists!</span></span>
<span id="cb11-6">icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon_save</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">icons =</span> needed_icons, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./icons"</span>)</span></code></pre></div>
</div>
<p>If we had a <code>{golem}</code> application the <code>icons</code> folder might be placed in <code>inst</code>. In a <code>rhino</code> application setup, we would put this icon set in <code>static</code>.</p>
<p>Either way, we would need to load the icon set on application start with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">app_icons <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> icons<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">icon_set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/icons"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>In this post we went through a simple workflow for creating HTML tables with icons to display small-scale, heterogenous data that are not suitable for charting and don’t require interactive table widgets. We also saw how to use this type of visualization in a <code>{shiny}</code> application and how to include only a subset of required icons as resources for our web application.</p>
</section>
<section id="gist" class="level1">
<h1>Gist</h1>
<p>The full code for the working application is available as a gist below:</p>
<script src="https://gist.github.com/teofiln/f87c29ad872075270d7357eba1d31205.js"></script>


</section>

 ]]></description>
  <category>R</category>
  <category>Shiny</category>
  <guid>https://discindo.org/posts/2023-03-19-icons/</guid>
  <pubDate>Sat, 18 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to set up an R-based AWS Lambda to write to AWS S3 on a schedule</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/r2lambda/2023-03-09-lambda-to-s3/</link>
  <description><![CDATA[ 





<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>At the end of this tutorial, we would have created an AWS Lambda function that fetches the most-recent Tidytuesday dataset and writes it into an S3 Bucket every Wednesday. To do this, we’ll first work interactively with <code>{r2lambda}</code> and <code>{paws}</code> to go through all the steps the Lambda function would eventually need to do, then wrap the code and deploy it to AWS Lambda, and finally schedule it to run weekly.</p>
</section>
<section id="getting-started-with-aws-simple-storage-service-s3-from-r" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-aws-simple-storage-service-s3-from-r">Getting started with AWS Simple Storage Service (S3) from R</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(r2lambda)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytuesdayR)</span></code></pre></div>
</div>
<p>As with any AWS service supported by <code>{paws}</code>, we can easily connect to S3 and perform some basic operations. Below, we establish an S3 service using <code>r2lambda::aws_connect</code>, then create a bucket called <code>tidytuesday-dataset</code>, drop and then delete and empty file, and delete the bucket altogether. This exercise is not very meaningful beyond learning the basics on how to interact with S3 from <code>R</code>. Eventually, though, our lambda function would need to do something similar, so being familiar with the process in an interactive session helps.</p>
<p><strong>To run any of the code below, you need some environmental variables set. See the <a href="https://github.com/discindo/r2lambda#build-a-docker-image-for-the-lambda-function">Setup</a> section in the <code>{r2lambda}</code> package readme for more details</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">s3_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a bucket on S3</span></span>
<span id="cb2-4">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_bucket</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upload an object to our bucket</span></span>
<span id="cb2-7">tmpfile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"txt"</span>)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, tmpfile)</span>
<span id="cb2-9">(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(tmpfile))</span>
<span id="cb2-10">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Body =</span> tmpfile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TestFile"</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list the contents of a bucket</span></span>
<span id="cb2-13">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete an object from a bucket</span></span>
<span id="cb2-16">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_object</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TestFile"</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete a bucket</span></span>
<span id="cb2-19">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_bucket</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span></code></pre></div>
</div>
<p>Now, the above procedure used a local file, but what if we generated some data during our session, and we want to stream that directly to S3 without saving to file? In many cases, we don’t have the option to write to disk or simply don’t want to.</p>
<p>In such cases we need to serialize our data object before trying to <code>put</code> it in the bucket. This comes down to calling <code>serialize</code> with <code>connection=NULL</code> to generate a <code>raw</code> vector without writing to a file. We can then put the <code>iris</code> data set from memory into our <code>a-unique-bucket</code> S3 bucket.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">s3_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3"</span>)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a bucket on S3</span></span>
<span id="cb3-4">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_bucket</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upload an object to our bucket</span></span>
<span id="cb3-7">siris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">serialize</span>(iris, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">connection =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb3-8">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Body =</span> siris, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TestFile2"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list the contents of a bucket</span></span>
<span id="cb3-11">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete an object from a bucket</span></span>
<span id="cb3-14">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_object</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TestFile2"</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># delete a bucket</span></span>
<span id="cb3-17">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_bucket</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a-unique-bucket"</span>)</span></code></pre></div>
</div>
<p>OK. With that, we now know the two steps our Lambda function would need to do:</p>
<ol type="1">
<li>fetch the most recent Tidytuesday data set (see <a href="https://discindo.org/post/an-r-aws-lambda-function-to-download-tidytuesday-datasets/">this post</a> for details)</li>
<li>put the data set as an object in the S3 bucket</li>
</ol>
<p>Still in an interactive session, lets just write the code that our Lambda would have to execute.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytuesdayR)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the most recent tuesday and fetch the corresponding data set</span></span>
<span id="cb4-4">most_recent_tuesday <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last_tuesday</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>())</span>
<span id="cb4-5">tt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tt_load</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> most_recent_tuesday)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by default it comes as class `tt_data`, which causes problems</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with serialization and conversion to JSON. So best to extract</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the data set(s) as a simple list</span></span>
<span id="cb4-10">tt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(tt_data), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) tt_data[[x]])</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># then serialize</span></span>
<span id="cb4-13">tt_data_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">serialize</span>(tt_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">connection =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a bucket on S3</span></span>
<span id="cb4-16">s3_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3"</span>)</span>
<span id="cb4-17">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_bucket</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>)</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upload an object to our bucket</span></span>
<span id="cb4-20">s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(</span>
<span id="cb4-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Body =</span> tt_data_raw, </span>
<span id="cb4-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>, </span>
<span id="cb4-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> most_recent_tuesday</span>
<span id="cb4-24">)</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list the contents of our bucket and find the Keys for all objects</span></span>
<span id="cb4-27">objects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>)</span>
<span id="cb4-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(objects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Contents, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Key"</span>)</span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "2023-03-07"</span></span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fetch a Tidytuesday dataset from S3</span></span>
<span id="cb4-32">tt_dataset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_object</span>(</span>
<span id="cb4-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>, </span>
<span id="cb4-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> most_recent_tuesday</span>
<span id="cb4-35">)</span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert from raw and show the first few rows</span></span>
<span id="cb4-38">tt_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Body <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unserialize</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
</div>
<p>Now we should have everything we need to write our Lambda function.</p>
</section>
<section id="lambda-s3-integration-dropping-a-file-in-an-s3-bucket" class="level2">
<h2 class="anchored" data-anchor-id="lambda-s3-integration-dropping-a-file-in-an-s3-bucket">Lambda + S3 integration: Dropping a file in an S3 bucket</h2>
<p>Wrapping the above interactive code into a function and also, defining an <code>s3_connect</code> function as a helper to create an S3 client within the function. By doing this, we avoid adding <code>r2lambda</code> as a dependency to the Lambda function. (At the time of writing, <code>r2lambda</code> does not yet support non-CRAN packages.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">s3_connect <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-2">  paws<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">config =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">credentials =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-4">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">creds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">access_key_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ACCESS_KEY_ID"</span>),</span>
<span id="cb5-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">secret_access_key =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SECRET_ACCESS_KEY"</span>)</span>
<span id="cb5-7">      ),</span>
<span id="cb5-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">profile =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PROFILE"</span>)</span>
<span id="cb5-9">    ),</span>
<span id="cb5-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">region =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"REGION"</span>)</span>
<span id="cb5-11">  ))</span>
<span id="cb5-12">}</span>
<span id="cb5-13"></span>
<span id="cb5-14">tidytuesday_lambda_s3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb5-15">  most_recent_tuesday <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last_tuesday</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>())</span>
<span id="cb5-16">  tt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tt_load</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> most_recent_tuesday)</span>
<span id="cb5-17">  tt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(tt_data), <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) tt_data[[x]])</span>
<span id="cb5-18">  tt_data_raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">serialize</span>(tt_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">connection =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb5-19">  </span>
<span id="cb5-20">  s3_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_connect</span>()</span>
<span id="cb5-21">  s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">put_object</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Body =</span> tt_data_raw,</span>
<span id="cb5-22">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>,</span>
<span id="cb5-23">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Key =</span> most_recent_tuesday)</span>
<span id="cb5-24">  </span>
<span id="cb5-25">}</span></code></pre></div>
</div>
<p>Now, calling <code>tidytuesday_lambda_s3()</code> should fetch and put the most recent Tidytuesday data set into our S3 bucket. To test it, we run:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidytuesday_lambda_s3</span>()</span>
<span id="cb6-2"></span>
<span id="cb6-3">list_objects <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(bucket) {</span>
<span id="cb6-4">  s3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_connect</span>()</span>
<span id="cb6-5">  obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> bucket)</span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(obj<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Contents, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Key"</span>)</span>
<span id="cb6-7">}</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>)</span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "2023-03-07"</span></span></code></pre></div>
</div>
<p>On to the next step, to create and deploy the Lambda function. We have a few considerations here:</p>
<ol type="1">
<li><p>For the Lambda function to connect to S3, it needs access to some environmental variables. The same ones as we have in our current interactive session without which we can’t establish local clients of AWS services. These are: <code>REGION</code>, <code>PROFILE</code>, <code>SECRET_ACCESS_KEY</code>, and <code>ACCESS_KEY_ID</code>. To include these envvars in the Lambda docker image on deploy, use the <code>set_aws_envvars</code> argument of <code>deploy_lambda</code>.</p></li>
<li><p>We have some dependencies that would need to be available in the docker image. We already saw how to install <code>{tidytuesdayR}</code> in our Lambda docker image in a <a href="https://discindo.org/post/an-r-aws-lambda-function-to-download-tidytuesday-datasets/">previous post</a>. Besides this, we also need to install <code>{paws}</code>, because without it we can’t interact with S3. To do this, we just need to add <code>dependencies = c("tidytuesdayR", "paws")</code> when building the image with <code>r2lambda::build_lambda</code>.</p></li>
</ol>
<section id="build" class="level3">
<h3 class="anchored" data-anchor-id="build">Build</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">r_code <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  s3_connect &lt;- function() {</span></span>
<span id="cb7-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    paws::s3(config = list(</span></span>
<span id="cb7-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      credentials = list(</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        creds = list(</span></span>
<span id="cb7-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          access_key_id = Sys.getenv('ACCESS_KEY_ID'),</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">          secret_access_key = Sys.getenv('SECRET_ACCESS_KEY')</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ),</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        profile = Sys.getenv('PROFILE')</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ),</span></span>
<span id="cb7-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      region = Sys.getenv('REGION')</span></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ))</span></span>
<span id="cb7-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb7-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  tidytuesday_lambda_s3 &lt;- function() {</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    most_recent_tuesday &lt;- tidytuesdayR::last_tuesday(date = Sys.Date())</span></span>
<span id="cb7-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tt_data &lt;- tidytuesdayR::tt_load(x = most_recent_tuesday)</span></span>
<span id="cb7-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tt_data &lt;- lapply(names(tt_data), function(x) tt_data[[x]])</span></span>
<span id="cb7-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tt_data_raw &lt;- serialize(tt_data, connection = NULL)</span></span>
<span id="cb7-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb7-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    s3_service &lt;- s3_connect()</span></span>
<span id="cb7-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    s3_service$put_object(Body = tt_data_raw,</span></span>
<span id="cb7-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                          Bucket = 'tidytuesday-datasets',</span></span>
<span id="cb7-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                          Key = most_recent_tuesday)</span></span>
<span id="cb7-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb7-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb7-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  lambdr::start_lambda()</span></span>
<span id="cb7-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-29"></span>
<span id="cb7-30">tmpfile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tt_lambda_s3_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".R"</span>)</span>
<span id="cb7-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> r_code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> tmpfile)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">runtime_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span></span>
<span id="cb8-2">runtime_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tmpfile</span>
<span id="cb8-3">dependencies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesdayR"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"paws"</span>)</span>
<span id="cb8-4"></span>
<span id="cb8-5">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_lambda</span>(</span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span>,</span>
<span id="cb8-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_function =</span> runtime_function,</span>
<span id="cb8-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_path =</span> runtime_path,</span>
<span id="cb8-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> dependencies</span>
<span id="cb8-10">)</span></code></pre></div>
</div>
</section>
<section id="deploy" class="level3">
<h3 class="anchored" data-anchor-id="deploy">Deploy</h3>
<p>We set a generous 2 minute timeout, just to be safe that the data set is successfully copied to S3. And we also increase the available memory to 1024 mb. Note also the flag to pass along our local AWS envvars to the deployed lambda environment.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy_lambda</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span>,</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set_aws_envvars =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Timeout =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>,</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MemorySize =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span></code></pre></div>
</div>
</section>
<section id="invoke" class="level3">
<h3 class="anchored" data-anchor-id="invoke">Invoke</h3>
<p>We invoke as usual, with an empty list as payload because our function does not take any arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke_lambda</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span>, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invocation_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RequestResponse"</span>, </span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include_logs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; INFO [2023-03-08 23:50:46] [invoke_lambda] Validating inputs.</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; INFO [2023-03-08 23:50:46] [invoke_lambda] Checking function state.</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; INFO [2023-03-08 23:50:47] [invoke_lambda] Function state: Active.</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; INFO [2023-03-08 23:50:47] [invoke_lambda] Invoking function.</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; </span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Lambda response payload: </span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; {"Expiration":[],"ETag":"\"4f5a6085215b9074faed28d816696a99\"","ChecksumCRC32":[],</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "ChecksumCRC32C":[],"ChecksumSHA1":[],"ChecksumSHA256":[],"ServerSideEncryption":"AES256",</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "VersionId":[],"SSECustomerAlgorithm":[],"SSECustomerKeyMD5":[],"SSEKMSKeyId":[],</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "SSEKMSEncryptionContext":[],"BucketKeyEnabled":[],"RequestCharged":[]}</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; </span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Lambda logs: </span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; OpenBLAS </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARNING</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> - could not determine the L2 cache size on this system, assuming 256k</span></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; INFO [2023-03-09 05:50:49] Using handler function  tidytuesday_lambda_s3</span></span>
<span id="cb10-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; START RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8 Version: $LATEST</span></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; --- Compiling #TidyTuesday Information for 2023-03-07 ----</span></span>
<span id="cb10-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; --- There is 1 file available ---</span></span>
<span id="cb10-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; --- Starting Download ---</span></span>
<span id="cb10-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Downloading file 1 of 1: `numbats.csv`</span></span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; --- Download complete ---</span></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; </span><span class="re">END</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8</span></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; REPORT RequestId: c6cb0600-3400-4ca3-9232-8af53542f8e8   Duration: 12061.06 ms   </span></span>
<span id="cb10-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Billed Duration: 13331 ms    Memory Size: 1024 MB    Max Memory Used: 181 MB Init </span></span>
<span id="cb10-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Duration: 1269.59 ms </span></span>
<span id="cb10-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; SUCCESS [2023-03-08 23:51:01] [invoke_lambda] Done.</span></span></code></pre></div>
</div>
<p>Then, to confirm that a Tidytuesday data set was written to S3 as an object in the bucket <code>tidytuesday-datasets</code> we would run:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">s3_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">service =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s3"</span>)</span>
<span id="cb11-2">objs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>)</span>
<span id="cb11-3">objs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Contents[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Key</span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "2023-03-07"</span></span></code></pre></div>
</div>
<p>We expect to see one object with a <code>Key</code> matching the date of the most recent Tuesday. At the time of writing that is March 7, 2023.</p>
</section>
<section id="schedule" class="level3">
<h3 class="anchored" data-anchor-id="schedule">Schedule</h3>
<p>Finally, to copy the Tidytuesday dataset on a weekly basis, for example, every Wednesday, we would use <code>r2lambda::schedule_lambda</code> with an execution rate set by <code>cron</code>.</p>
<p>First, to validate that things are working, we can set the lambda on a 5-minute schedule and check the time stamp on the on the S3 object to make sure it is updated every 5 minutes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># schedule the lambda to execute every 5 minutes</span></span>
<span id="cb12-2">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schedule_lambda</span>(</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda_function =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span>, </span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">execution_rate =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rate(5 minutes)"</span></span>
<span id="cb12-5">  )</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># occasionally query the S3 bucket status and the LastModified time stamp</span></span>
<span id="cb12-8">objs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> s3_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_objects</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Bucket =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday-datasets"</span>)</span>
<span id="cb12-9">objs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Contents[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>LastModified</span></code></pre></div>
</div>
<p>If all is well, set it to run every Wednesday at midnight:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schedule_lambda</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda_function =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda_s3"</span>,</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">execution_rate =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cron(0 0 * * Wed *)"</span></span>
<span id="cb13-4">  )</span></code></pre></div>
</div>
<p>Next Wednesday morning, we should have two objects, with keys matching the two most-recent Tuesdays.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>


</section>

 ]]></description>
  <category>AWS</category>
  <category>R</category>
  <guid>https://discindo.org/posts/r2lambda/2023-03-09-lambda-to-s3/</guid>
  <pubDate>Wed, 08 Mar 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Set an R-based AWS Lambda function to run on a schedule</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/2023-02-26-set-an-r-based-aws-function-to-run-on-a-schedule/</link>
  <description><![CDATA[ 





<p>A common use of the AWS Lambda service is to set a function to run on a recurring schedule, e.g.&nbsp;to collect logs, move data, or perform some ETL process. In this post, we’ll see how we can set up an AWS Lambda function, running <code>R</code>, on a schedule.</p>
<section id="a-lambda-runtime-function" class="level2">
<h2 class="anchored" data-anchor-id="a-lambda-runtime-function">A lambda runtime function</h2>
<p>We start with a simple function that does not require any input and does not return anything. If this example lambda is to run on a schedule, we don’t want to worry about any input arguments. Also, we want this lambda function to simply have a side effect, like printing something to the logs, without returning any data or writing to a database. This will help us greatly with the setup, in that we’ll be able to deploy and schedule the lambda with minimal involvement from other AWS services.</p>
<p>With this in mind, we have the following function that simply prints the system time. Printing the current time makes sense because we can easily check that the lambda runs on the correct schedule from the logs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">current_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CURRENT TIME: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()))</span>
<span id="cb1-3">}</span></code></pre></div>
</div>
</section>
<section id="build-test-and-deploy" class="level2">
<h2 class="anchored" data-anchor-id="build-test-and-deploy">Build, test, and deploy</h2>
<p>Then, we follow the procedure described in <a href="../../post/an-r-aws-lambda-function-to-download-tidytuesday-datasets/">Tidy Tuesday dataset Lambda post</a>. We write this to a file that we’ll use to build the lambda <code>docker</code> image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">r_code <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  current_time &lt;- function() {</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    print(paste('CURRENT TIME:', Sys.time()))</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  lambdr::start_lambda()</span></span>
<span id="cb2-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">tmpfile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time_lambda_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".R"</span>)</span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> r_code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> tmpfile)</span></code></pre></div>
</div>
<p>And then build the <code>docker</code> image. Note that we don’t have any dependencies other than base <code>R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_lambda</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_function =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_path =</span> tmpfile,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb3-6">)</span></code></pre></div>
</div>
<p>We test the lambda docker container locally, because it makes sense. The console output should include the log messages and the standard output string showing the current time.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>())</span></code></pre></div>
</div>
<p>Then, we deploy the lambda to AWS, leaving the lambda environment to its defaults, as 3 seconds should be enough to get and print the current time.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>)</span></code></pre></div>
</div>
<p>Finally, to make sure everything went well, we invoke the cloud instance of our function. Be sure to include the logs, as this particular function does not return anything.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke_lambda</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>,</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invocation_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RequestResponse"</span>,</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include_logs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-6">)</span></code></pre></div>
</div>
</section>
<section id="schedule-to-run-every-minute" class="level2">
<h2 class="anchored" data-anchor-id="schedule-to-run-every-minute">Schedule to run every minute</h2>
<p>To make a lambda function run on a recurring schedule, we need to update an already deployed function. This involves three steps and two AWS services, <a href="https://aws.amazon.com/lambda/">Lambda</a> for serverless computing and <a href="https://aws.amazon.com/eventbridge/">EventBridge</a> for serverless event routing:</p>
<ul>
<li>creating a schedule event role (EventBridge, <code>paws::eventbridge</code>)</li>
<li>adding permissions to this role to invoke lambda functions (Lambda, <code>paws::lambda</code>)</li>
<li>adding our target lambda function to event (EventBridge, <code>paws::eventbridge</code>)</li>
</ul>
<p>Detailed instructions are available in the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-run-lambda-schedule.html">AWS documentation</a>. The function <code>schedule_lambda</code> abstracts these three steps in one go. To set a Lambda on a schedule, we need the name of the function we wish to update, and the rate at which we want EventBridge to invoke it. Two expression formats for setting the rate are supported, <code>cron</code> and <code>rate</code>. For example, to schedule a lambda to run every Sunday at midnight, we could use <code>execution_rate = "cron(0 0 * * Sun)"</code>. Alternatively, to schedule a lambda to run every 15 minutes, we might use <code>execution_rate = "rate(15 minutes)"</code>. The details are in this <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html">AWS article</a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">schedule_lambda</span>(</span>
<span id="cb7-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda_function =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">execution_rate =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rate(1 minute)"</span></span>
<span id="cb7-4">  )</span></code></pre></div>
</div>
</section>
<section id="checking-the-aws-logs" class="level2">
<h2 class="anchored" data-anchor-id="checking-the-aws-logs">Checking the AWS logs</h2>
<p>To see if our function runs every minute, we can take a look at the AWS logs. If the function was writing to a database, or dropping files in an S3 bucket, we could also check the contents of those resources for the effects of the scheduled lambda function. But as our example function only prints the current time, the only way to know that it indeed runs every minute is to check the logs.</p>
<p>To do this, we’ll use <code>paws</code> and <code>r2lambda::aws_connect</code> to establish an AWS CloudWatchLogs service locally, and fetch the recent logs to look for traces of our lambda function.</p>
<p>In the first step, we connect to <code>cloudwatchlogs</code> and fetch the names of the log groups. Inspect the <code>logs</code> object below to find the name corresponding to the lambda function whose logs we want to fetch.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">logs_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">service =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cloudwatchlogs"</span>)</span>
<span id="cb8-2">logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> logs_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">describe_log_groups</span>()</span>
<span id="cb8-3">(logGroups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(logs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>logGroups, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>Then, we can grab only the data for our scheduled lambda function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">current_time_lambda_logs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> logs_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_log_events</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">logGroupName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/aws/lambda/current_time"</span>)</span></code></pre></div>
</div>
<p>And pull only the message printed by our <code>R</code> function wrapped in the lambda:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">messages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(current_time_lambda_logs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>events, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)</span>
<span id="cb10-2">current_time_messages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> messages[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CURRENT TIME"</span>, messages)]</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Current_time_lambda =</span> current_time_messages)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;                         Current_time_lambda</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1 [1] "CURRENT TIME: 2023-02-26 22:53:55"\n</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2 [1] "CURRENT TIME: 2023-02-26 22:54:41"\n</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3 [1] "CURRENT TIME: 2023-02-26 22:55:41"\n</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 4 [1] "CURRENT TIME: 2023-02-26 22:56:41"\n</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 5 [1] "CURRENT TIME: 2023-02-26 22:57:41"\n</span></span></code></pre></div>
</div>
<p>Evidently, the Lambda function printed the system time every one minute, as we intended!</p>
</section>
<section id="clean-up" class="level2">
<h2 class="anchored" data-anchor-id="clean-up">Clean up</h2>
<p>We don’t want to let a this lambda fire every minute, even if trivial it still uses resources and incurs some cost. So its wise to delete the event schedule rule and maybe even the lambda function it self.</p>
<p>To remove the event rule, we first need to remove associated targets. In the code below, we connect to EventBridge, lookup the names of all event rules, find the rule we wish to remove (in this case the most-recent one with index 1), and then, first remove its target followed by deleting the rule it self. (I’ll probably add a function abstract this procedure in the <code>{r2lamdba}</code> package.)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># connect to the EventBridge service</span></span>
<span id="cb11-2">events_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eventbridge"</span>)</span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the names of all rules </span></span>
<span id="cb11-4">schedule_rules <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rules</span>()[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find the targets associated with the rule we want to remove</span></span>
<span id="cb11-7">rule_to_remove <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> schedule_rules[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb11-8"></span>
<span id="cb11-9">target_arn_to_remove <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> events_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_targets_by_rule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rule =</span> rule_to_remove)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Targets[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Id</span>
<span id="cb11-10">events_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_targets</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rule =</span> rule_to_remove, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Ids =</span> target_arn_to_remove)</span>
<span id="cb11-11">events_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_rule</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> rule_to_remove)</span>
<span id="cb11-12"></span>
<span id="cb11-13">events_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rules</span>()[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Finally, to remove the Lambda, we do something similar. Look up the names of all deployed functions on our account, and then delete the one(s) we’d like to delete.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">lambda_service <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aws_connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lambda"</span>)</span>
<span id="cb12-2">lambda_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_functions</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Functions <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[["</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FunctionName"</span>)</span>
<span id="cb12-3">lambda_service<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delete_function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FunctionName =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current_time"</span>)</span></code></pre></div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post: - we wrote a simple lambda runtime function, - built a docker image locally, - tested the lambda invocation, - deployed it to AWS Lambda, - updated it to run on a schedule, - checked the AWS logs to confirm it executes at the correct times, and - cleaned up our AWS environment.</p>
<p>I hope you found this tutorial useful, and that it will motivate you to try the <code>{r2lambda}</code> package. It is available on <a href="https://github.com/discindo/r2lambda">GitHub</a> and can be installed with <code>remotes::install_github</code>. I am looking for feedback on whether or not the workflows from <code>r2lambda</code> are working for other people – not many have tried it so far. I am also interested in suggestions on how to improve the interface, what features to add, what additional documentation to include, and so on. Try it and share your experience!</p>


</section>

 ]]></description>
  <category>AWS</category>
  <category>R</category>
  <guid>https://discindo.org/posts/2023-02-26-set-an-r-based-aws-function-to-run-on-a-schedule/</guid>
  <pubDate>Sat, 25 Feb 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>An R AWS Lambda function to download Tidytuesday datasets</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/r2lambda/2023-02-24-an-r-aws-lambda-function-to-download-tidytuesday-datasets/</link>
  <description><![CDATA[ 





<section id="use-r2lambda-to-download-tidytuesday-dataset" class="level2">
<h2 class="anchored" data-anchor-id="use-r2lambda-to-download-tidytuesday-dataset">Use <code>{r2lambda}</code> to download Tidytuesday dataset</h2>
<p>In this exercise, we’ll create an AWS Lambda function that downloads the <a href="https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-02-07">tidytuesday</a> data set for the most recent Tuesday (or most recent Tuesday from a date of interest).</p>
</section>
<section id="required-packages" class="level2">
<h2 class="anchored" data-anchor-id="required-packages">Required packages</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(r2lambda)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jsonlite)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span></code></pre></div>
</div>
</section>
<section id="runtime-function" class="level2">
<h2 class="anchored" data-anchor-id="runtime-function">Runtime function</h2>
<p>The first step is to write the runtime function. This is the function that will be executed when we invoke the Lambda function after it has been deployed. To download the Tidytuesday data set, we will use the <code>{tidytuesdayR}</code> package. In the runtime script, we define a function called <code>tidytyesday_lambda</code> that takes one optional argument <code>date</code>. If <code>date</code> is omitted, the function returns the data set(s) for the most recent Tuesday, otherwise, it looks up the most recent Tuesday from a date of interest and returns the corresponding data set(s).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytuesdayR)</span>
<span id="cb2-2"></span>
<span id="cb2-3">tidytuesday_lambda <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb2-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(date))</span>
<span id="cb2-5">    date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()</span>
<span id="cb2-6">  </span>
<span id="cb2-7">  most_recent_tuesday <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">last_tuesday</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> date)</span>
<span id="cb2-8">  tt_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tidytuesdayR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tt_load</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> most_recent_tuesday)</span>
<span id="cb2-9">  data_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(tt_data)</span>
<span id="cb2-10">  data_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(data_names, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) tt_data[[x]])</span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(data_list)</span>
<span id="cb2-12">}</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidytuesday_lambda</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-02"</span>)</span></code></pre></div>
</div>
</section>
<section id="r-script-to-build-the-lambda" class="level2">
<h2 class="anchored" data-anchor-id="r-script-to-build-the-lambda">R script to build the lambda</h2>
<p>To build the lambda image, we need an <code>R</code> script that sources any required code, loads any needed libraries, defines a runtime function, and ends with a call to <code>lambdr::start_lambda()</code>. The runtime function does not have to be defined in this file. We could, for example, source another script, or load a package and set a loaded function as the runtime function in the subsequent call to <code>r2lambda::build_lambda</code> (see below). We save this script to a file and record the path:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">r_code <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  library(tidytuesdayR)</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  tidytuesday_lambda &lt;- function(date = NULL) {</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if (is.null(date))</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      date &lt;- Sys.Date()</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    most_recent_tuesday &lt;- tidytuesdayR::last_tuesday(date = date)</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    tt_data &lt;- tidytuesdayR::tt_load(x = most_recent_tuesday)</span></span>
<span id="cb3-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    data_names &lt;- names(tt_data)</span></span>
<span id="cb3-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    data_list &lt;- lapply(data_names, function(x) tt_data[[x]])</span></span>
<span id="cb3-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return(data_list)</span></span>
<span id="cb3-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb3-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  </span></span>
<span id="cb3-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  lambdr::start_lambda()</span></span>
<span id="cb3-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-17"></span>
<span id="cb3-18">tmpfile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ttlambda_"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fileext =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".R"</span>)</span>
<span id="cb3-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> r_code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> tmpfile)</span></code></pre></div>
</div>
</section>
<section id="build-test-and-deploy-the-lambda-function" class="level2">
<h2 class="anchored" data-anchor-id="build-test-and-deploy-the-lambda-function">Build, test, and deploy the lambda function</h2>
<section id="build" class="level3">
<h3 class="anchored" data-anchor-id="build">1. Build</h3>
<ul>
<li><p>We set the <code>runtime_function</code> argument to the name of the function we wish the <code>docker</code> container to run when invoked. In this case, this is <code>tidytuesday_lambda</code>. This adds a <code>CMD</code> instruction to the <code>Dockerfile</code></p></li>
<li><p>We set the <code>runtime_path</code> argument to the path we stored the script defining our runtime function.</p></li>
<li><p>We set the <code>dependencies</code> argument to <code>c("tidytuesdayR")</code>because we need to have the <code>tidytuesdayR</code> package installed within the <code>docker</code> container if we are to download the dataset. This steps adds a <code>RUN</code> instruction to the <code>Dockerfile</code> that calls <code>install.packages</code> to install <code>{tidytuesdayR}</code> from CRAN.</p></li>
<li><p>Finally, the <code>tag</code> argument sets the name of our Lambda function which we’ll use later to test and invoke the function. The <code>tag</code> argument also becomes the name of the folder that <code>{r2lambda}</code> will create to build the image. This folder will have two files, <code>Dockerfile</code> and <code>runtime.R</code>. <code>runtime.R</code> is our script from <code>runtime_path</code>, renamed before it is copied in the <code>docker</code> image with a <code>COPY</code> instruction.</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">runtime_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday_lambda"</span></span>
<span id="cb4-2">runtime_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tmpfile</span>
<span id="cb4-3">dependencies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesdayR"</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_lambda</span>(</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday3"</span>,</span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_function =</span> runtime_function,</span>
<span id="cb4-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_path =</span> runtime_path,</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> dependencies</span>
<span id="cb4-10">)</span></code></pre></div>
</div>
</section>
<section id="test" class="level3">
<h3 class="anchored" data-anchor-id="test">2. Test</h3>
<p>To make sure our Lambda <code>docker</code> container works as intended, we start it locally, and invoke it to test the response. The response is a list of three elements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>()))</span></code></pre></div>
</div>
<ul>
<li><code>status</code>, should be 0 if the test worked,</li>
<li><code>stdout</code>, the standard output stream of the invocation, and</li>
<li><code>stderr</code>, the standard error stream of the invocation</li>
</ul>
<p><code>stdout</code> and <code>stderr</code> are <code>raw</code> vectors that we need to parse, for example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rawToChar</span>(response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>stdout) </span></code></pre></div>
</div>
<p>If the <code>stdout</code> slot of the response returns the correct output of our function, we are good to deploy to AWS.</p>
</section>
<section id="deploy" class="level3">
<h3 class="anchored" data-anchor-id="deploy">3. Deploy</h3>
<p>The deployment step is simple, in that all we need to do is specify the name (tag) of the Lambda function we wish to push to AWS ECR. The <code>deploy_lambda</code> function also accepts <code>...</code>, which are named arguments ultimately passed onto <code>paws.compute:::lambda_create_function</code>. This is the function that calls the Lambda API. To see all available arguments run <code>?paws.compute:::lambda_create_function</code>.</p>
<p>The most important arguments are probably <code>Timeout</code> and <code>MemorySize</code>, which set the time our function will be allowed to run and the amount of memory it will have available. In many cases it will make sense to increase the defaults of 3 seconds and 128 mb.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday3"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Timeout =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
</div>
</section>
<section id="invoke" class="level3">
<h3 class="anchored" data-anchor-id="invoke">4. Invoke</h3>
<p>If all goes well, our function should now be available on the cloud awaiting requests. We can invoke it from <code>R</code> using <code>invoke_lambda</code>. The arguments are:</p>
<ul>
<li><code>function_name</code> – the name of the function</li>
<li><code>invocation_type</code> – typically <code>RequestResponse</code></li>
<li><code>include_log</code> – whether to print the logs of the run on the console</li>
<li><code>payload</code> – a named list with arguments sent to the <code>runtime_function</code>. In this case, the runtime function, <code>tidytuesday_lambda</code> has a single argument <code>date</code>, so the corresponding list is <code>list(date = Sys.Date())</code>. As our function can be called without any argument, we can also send an empty list as the payload.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke_lambda</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidytuesday3"</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invocation_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RequestResponse"</span>,</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include_logs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-6">)</span></code></pre></div>
</div>
<p>Just like in the local test, the response payload comes as a raw vector that needs to be parsed into a data.frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">tidytuesday_dataset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Payload <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rawToChar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-3">  jsonlite<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fromJSON</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplifyDataFrame =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5">tidytuesday_dataset[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In this post, we went over some details about:</p>
<ul>
<li>how to prepare an <code>R</code> script before deploying it as a Lambda function,<br>
</li>
<li>what are the roles of several of the key arguments,<br>
</li>
<li>how to request longer timeout or more memory for a Lambda function, and<br>
</li>
<li>how to parse the response payload returned by the Lambda function</li>
</ul>
<p>Stay tuned for a follow-up post where we set this Lambda function to run on a weekly schedule!</p>


</section>

 ]]></description>
  <category>AWS</category>
  <category>R</category>
  <guid>https://discindo.org/posts/r2lambda/2023-02-24-an-r-aws-lambda-function-to-download-tidytuesday-datasets/</guid>
  <pubDate>Thu, 23 Feb 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Test an R-based AWS lambda function locally before deploying to the cloud</title>
  <dc:creator>teo </dc:creator>
  <link>https://discindo.org/posts/r2lambda/2023-02-19-test-an-r-based-aws-lambda-function-locally/</link>
  <description><![CDATA[ 





<p>Creating AWS Lambda functions from <code>R</code> code can be a powerful way to make our local <code>R</code> code available in the cloud as an on-demand serverless service. In recent weeks I’ve been working on my package <a href="https://github.com/discindo/r2lambda">r2lambda</a> to build and deploy AWS Lambda functions from the <code>R</code> console. In an introductory <a href="https://discindo.org/post/deploy-an-r-script-as-an-aws-lambda-function-without-leaving-the-r-console/">article</a> about the package a few weeks ago, I covered the basics and showcased the main usage:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install_packages("remotes")</span></span>
<span id="cb1-3">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discindo/r2lambda"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">r2lambda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy_lambda</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-lambda"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_function =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_fun"</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path/to/script/of/my_fun"</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb1-10">  )</span>
<span id="cb1-11">  </span></code></pre></div>
<p>In my first post on the topic, I noted that this very much a work in progress, and that I hope to actively develop this package by adding features that would make it useful in more realistic scenarios.</p>
<section id="testing-r-based-aws-lambda-functions-locally" class="level1">
<h1>Testing R-based AWS Lambda functions locally</h1>
<p>One such feature was the ability to test our <code>R</code>-based Lambda function locally before deploying to the AWS cloud. This is super useful, because, depending on the size of the <code>docker</code> image it might take a while to push it to the AWS ECR repository. Also, creating an AWS Lambda function from the ECR docker image, requires granting the function a role and permissions policy to execute or access other services. All of these steps create resources/services in your AWS account, so ideally, would only be done when we are certain that docker image we are deploying as a Lambda function works correctly.</p>
<p>This procedure is well <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-test.html">documented</a>. After creating the Lambda <code>docker</code> image, to test it locally, we need to 1) run a container on our local machine and 2) send a request to it with <code>curl</code>. Essentially, we are ‘invoking’ the function with the same payload the same way we’d do it in the cloud, but locally. This is the best way to know that everything works as intended. Merely testing the <code>R</code> code separately, without the Lambda <code>docker</code> context, might not be enough.</p>
<p>I packaged this routine in the function <code>test_lambda</code> and added this step to the <code>{r2lamdba}</code> deployment workflow. With these changes, instead of one function <code>deploy_lambda</code> that would build and deploy the image, we now have thee steps:</p>
<ol type="1">
<li><code>build_lambda</code> – to build and tag the <code>docker</code> image locally</li>
<li><code>test_lambda</code> – to test the lambda docker container locally (optional but recommended)</li>
<li><code>deploy_lambda</code> – to push the docker image to the cloud and create the function</li>
</ol>
<p>Or in code:</p>
<section id="build-a-docker-image-for-the-lambda-function" class="level3">
<h3 class="anchored" data-anchor-id="build-a-docker-image-for-the-lambda-function">Build a docker image for the lambda function</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">runtime_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity"</span></span>
<span id="cb2-2">runtime_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity.R"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r2lambda"</span>)</span>
<span id="cb2-3">dependencies <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Might take a while, its building a docker image</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build_lambda</span>(</span>
<span id="cb2-7"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity1"</span>,</span>
<span id="cb2-8"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_function =</span> runtime_function,</span>
<span id="cb2-9"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">runtime_path =</span> runtime_path,</span>
<span id="cb2-10"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dependencies =</span> dependencies</span>
<span id="cb2-11"> )</span></code></pre></div>
</section>
<section id="test-the-lambda-docker-image-locally" class="level3">
<h3 class="anchored" data-anchor-id="test-the-lambda-docker-image-locally">Test the lambda docker image locally</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">payload <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">tag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity1"</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity1"</span>, payload)</span></code></pre></div>
</section>
<section id="deploy-to-aws-lambda" class="level3">
<h3 class="anchored" data-anchor-id="deploy-to-aws-lambda">Deploy to AWS Lambda</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Might take a while, its pushing it to a remote repository</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy_lambda</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tag =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity1"</span>)</span></code></pre></div>
</section>
<section id="invoke-deployed-lambda" class="level3">
<h3 class="anchored" data-anchor-id="invoke-deployed-lambda">Invoke deployed lambda</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invoke_lambda</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">function_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parity1"</span>,</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">invocation_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RequestResponse"</span>,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">payload =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">number =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">include_logs =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Lambda response payload: </span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; {"parity":"even"}</span></span></code></pre></div>
<p>So, although we’ve added a couple of steps to the workflow, I think its for the better, as we can have finer control over building and deploying. For example, sometimes we might want to deploy a Lambda function from an existing <code>docker</code> image, so de-coupling the build and deploy steps makes a lot of sense.</p>
<p>Would love to hear from you! Let me know if you try the <code>r2lamdba</code> package or if you know of any similar projects.</p>


</section>
</section>

 ]]></description>
  <category>AWS</category>
  <category>R</category>
  <guid>https://discindo.org/posts/r2lambda/2023-02-19-test-an-r-based-aws-lambda-function-locally/</guid>
  <pubDate>Sat, 18 Feb 2023 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
