{
  "hash": "1565e0146d45be52fffc6f537e157965",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'A {shiny} app to wrap BlasterJS and visualize NCBI blast results locally'\nauthors: ['teo']\ndate: '2022-06-23'\nslug: []\ncategories:\n  - Shiny\n  - R\ntags:\n  - blasterjs\n  - ncbi\n  - blast\nimages: []\n---\n\n\n\n## `blast` and `BlasterJS`\n\nI recently learned about a really slick `JavaScript` component for interactive visualization\nof NCBI's `blast` output. `BlasterJS` ([Website](http://sing-group.org/blasterjs/), [Paper](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0205286)) makes it \npossible to visualize `blast` results in a way similar to the typical viz available on NCBI's \nwebsite. This is a fantastic resource, both in a day-to-day bioinformatics workflows, as well as\nfor sharing results of genomics projects. For example, if we sequenced a novel genome and would \nlike our collaborators or the public to blast some sequences against our genome, we could show\nthe results with `BlasterJS`. Awesome!\n\n## `BlasterJS` dependencies and HTML template\n\nBeing an `R` programmer, and considering the wealth of `Bioconductor` resources for \nbioinformatics, I thought being able to run `BlasterJS` from `R` would be very useful. So\nI wrote a very small and simple `{golem}` application, called `{blastR}` to launch `BlasterJS` from `R`. One can\ninstall the `{blastR}` package locally and launch it when needed, or deploy an instance of `blastR` on\ntheir favorite `{shiny}` server platform to simply upload a `blast` output file.\n\nWith `{golem}`, the steps to make `BlasterJS` available in `shiny` are super easy:\n\n1. Download the `JavaScript` dependencies (`blaster.js` and `html2canvas.js`) and place \nthem `inst/app/www/js`. `inst/app/www` is the typical path for adding external resources to `{shiny}`, \nand is added to the resource path by `{golem}` by default. We also add another subdirectory, `js`,\nbecause the `BlasterJS` `HTML` template expect these resources in a folder called `js`. \n\n(The `BlasterJS` [website](http://sing-group.org/blasterjs/) also mentions `Bootstrap 3` as a dependency, \nbut we don't need to load that as it is bundled with `{shiny}` already.)\n\n2. Create a `{shiny}` HTML template from the suggested `BlasterJS` `HTML` template. With `{golem}`, this is\nas easy as:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngolem::add_html_template(\"BlasterJS\")\n#>  ✔ File created at /home/blasteR/inst/app/www/BlasterJS.html\n#>  \n#>  ── To use this html file as a template, add the following code in app_ui.R: ──────────────────────────────────\n#>  htmlTemplate(\n#>      app_sys(\"app/www/BlasterJS.html\"),\n#>      body = tagList()\n#>      # add here other template arguments\n#>  )\n```\n:::\n\n\n\n\nThen, we navigate to \"inst/app/www/\" and open \"BlasterJS.html\". Copy the HTML suggested\nby the `BlasterJS` team:\n\n```\n<head>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" integrity=\"sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7\" crossorigin=\"anonymous\" />\n    ...\n</head>\n<body>\n    ...\n    <input type=\"file\" id=\"blastinput\" />\n    <div id=\"blast-multiple-alignments\"></div>\n    <div id=\"blast-alignments-table\"></div>\n    <div id=\"blast-single-alignment\"></div>\n    ...\n    <script type=\"text/javascript\" src=\"js/html2canvas.js\"></script>\n    <script type=\"text/javascript\" src=\"js/blaster.js\"></script>\n    <script type=\"text/javascript\">\n        var blasterjs = require(\"biojs-vis-blasterjs\");\n        var instance  = new blasterjs({\n            input: \"blastinput\",\n            multipleAlignments: \"blast-multiple-alignments\",\n            alignmentsTable: \"blast-alignments-table\",\n            singleAlignment: \"blast-single-alignment\"\n        });    \n    </script>\n</body>\n```\n\nAnd modify:  \n1. To remove the `head` tag, this will come from our `{shiny}` app `HTML`.   \n2. Change the `<body></body>` container into a plain `<div></div>` container.  \n(This is probably not necessary, but it makes more sense to insert this HTML as a `div`, \nnot the whole `body` of our `{shiny}` app)\n\nAfter these changes, the contents of `inst/app/www/BlasterJS.html` should be:\n\n```\n<div>\n    <input type=\"file\" id=\"blastinput\" />\n    <div id=\"blast-multiple-alignments\"></div>\n    <div id=\"blast-alignments-table\"></div>\n    <div id=\"blast-single-alignment\"></div>\n    <script type=\"text/javascript\" src=\"js/html2canvas.js\"></script>\n    <script type=\"text/javascript\" src=\"js/blaster.js\"></script>\n    <script type=\"text/javascript\">\n        var blasterjs = require(\"biojs-vis-blasterjs\");\n        var instance  = new blasterjs({\n            input: \"blastinput\",\n            multipleAlignments: \"blast-multiple-alignments\",\n            alignmentsTable: \"blast-alignments-table\",\n            singleAlignment: \"blast-single-alignment\"\n        });\n    </script>\n</div>\n```\n\n## A `{shiny}` + `{golem}` application wrapping `BlasterJS`\n\nFinally, to use this `HTML` template, we write in our `app_ui`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_ui <- function(request) {\n  tagList(\n    golem_add_external_resources(),\n    fluidPage(\n      h1(\"blasteR: A shiny app using the wonderful `BlasterJS` component\"),\n      shiny::htmlTemplate(app_sys(\"app/www/BlasterJS.html\"))\n    )\n  )\n}\n```\n:::\n\n\n\n\nDone!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}