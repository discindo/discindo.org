{
  "hash": "56ed6907e3da44de7c3cd6d06bd4cdc4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: How to use custom icons in Rmd reports and Shiny applications\nauthor: teo\ndate: '2023-03-19'\nexecute:\n  eval: false\nslug: icons\ncategories:\n  - R\n  - Shiny\ntags:\n  - icons\n  - htmltools\n  - HTML\nsubtitle: ''\nsummary: 'A workflow on how to create visually pleasing and effective static HTML visualizations of small-scale and heterogenous tabular data'\nauthors: [teo]\nlastmod: '2023-03-19T10:56:26-06:00'\nfeatured: no\nprojects: []\n---\n\n\n\n\n\nCreating custom HTML tables with icons can be a great way to display data. In some\ncases, like when we have a few, heterogeneous data points, it is better than \ncreating charts or using feature-rich table widgets that come with a lot of dependencies\n(e.g., `{reactable}`, `{DT}`, and similar).\n\nIn a recent project, I worked on a `{shiny}` application that displays a custom, static, \n`HTML` table with some icons. For this project we needed some icons available \nthrough the [`{icons}`](https://github.com/mitchelloharawild/icons) `R` package.\nBelow is a quick tutorial about how to use `{htmltools}` and `{icons}` to \ncreate tables with icons, and how to use the icons for Rmd HTML reports and `{shiny}`\napplications.\n\n## Dependencies\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"htmltools\") # possibly unnecessary\nremotes::install_github(\"mitchelloharawild/icons\")\n```\n:::\n\n\n\n\n\n## Data\n\nFor the type of table we are creating here, we want a few data points of different\ntypes. For example, if we had to display personal and social media information in \na tabular format, we could have something like the list below. We have one person, \n\"Jaime\" and we record information about their age, hobby, and twitter account:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njaime <-\n  list(\n    Name = \"Jaime\",\n    Position = \"Researcher\",\n    Twitter = \"Jaime123\",\n    Hobby = \"Football\"\n  )\njaime\n```\n:::\n\n\n\n\n\nFor now, we'll work only with this one person list, but you can imagine having \nmany such items in a data frame and indexing this data frame to display data.\n\n## Icons\n\nFor icons, we'll use the `{icons}` package. We'll work with `fontawesome` icons,\nbut with the `{icons}` package, we have several other options too:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(icons)\n```\n:::\n\n\n\n\n\nDownloading icon sets is simple, we use `icons::download_*`, and the resulting \nobject is an `icon_set` class that we can pass an icon name to obtain the SVG \nof the icon:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nicons::download_fontawesome()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nicons::fontawesome(\"twitter\")\n```\n:::\n\n\n\n\n\n## HTML table with icons\n\nFirst, we add icons to our person list. We convert each item to a list with\ntwo slots, `text` and `icon`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njaime <-\n  list(\n    Name = list(text = \"Jaime\", icon = \"user\"),\n    Position = list(text = \"Researcher\", icon = \"flask\"),\n    Twitter = list(text = \"Jaime123\", icon = \"twitter\"),\n    Hobby = list(text = \"Football\", icon = \"futbol\")\n  )\n```\n:::\n\n\n\n\n\nNext, we'll use this list of item lists to generate the HTML for our table:\n\n- We define some CSS styles for the `th` and `td` tags\n- We use `lapply` to cycle over the elements of our person list `jaime` to\ngenerate rows (`tr` + `td`) tags for each item\n- We wrap the row_tags in a table tag (`tags$table`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstyle <- \"text-align: left; padding: 10px 25px;\"\nrow_tags <- lapply(jaime,\n                   function(x) {\n                     htmltools::tags$tr(\n                       htmltools::tags$td(\n                         style = style,\n                         icons::icon_style(\n                           icons::fontawesome(name = x[[\"icon\"]]),\n                           scale = 1.5,\n                           fill = \"#5E81AC\"\n                         )\n                       ),\n                       htmltools::tags$td(style = style, x[[\"text\"]])\n                     )\n                   })\n\ncontainer_style <- \"\n    border: 0.5px solid #5E81AC; \n    width: 50%; \n    padding: 20px; \n    display: flex; \n    justify-content: center;\"\n\ntable_with_icons <- htmltools::div(style = container_style,\n               htmltools::tags$table(\n                 htmltools::tags$tr(\n                   htmltools::tags$th(\"Icon\", style = style),\n                   htmltools::tags$th(\"Text\", style = style)\n                 ),\n                 row_tags\n               ))\ntable_with_icons\n```\n:::\n\n\n\n\n\n# Application in a parametrized report or a Shiny application\n\nTo use our table with icons in a Rmd report or shiny application, we need to\nwrap it into a function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_table_w_icons <- function(person_list) {\n  style <- \"text-align: left; padding: 10px 25px;\"\n  row_tags <- lapply(person_list,\n                     function(x) {\n                       htmltools::tags$tr(\n                         htmltools::tags$td(\n                           style = style,\n                           icons::icon_style(\n                             icons::fontawesome(name = x[[\"icon\"]]),\n                             scale = 1.5,\n                             fill = \"#5E81AC\"\n                           )\n                         ),\n                         htmltools::tags$td(style = style, x[[\"text\"]])\n                       )\n                     })\n  \n  container_style <- \"\n    border: 0.5px solid #5E81AC;\n    width: 50%;\n    padding: 20px;\n    display: flex;\n    justify-content: center;\"\n  \n  table_with_icons <- htmltools::div(style = container_style,\n                                     htmltools::tags$table(\n                                       htmltools::tags$tr(\n                                         htmltools::tags$th(\"Icon\", style = style),\n                                         htmltools::tags$th(\"Text\", style = style)\n                                       ),\n                                       row_tags\n                                     ))\n  return(table_with_icons)\n}\n\nmake_table_w_icons(jaime)\n```\n:::\n\n\n\n\n\nWe can now create a simple `{shiny}` application that displays our person data with icons.\n\n## Shiny module\n\nA simple `{shiny}` module that uses server-side rendering to make the `HTML` table.\nThe server defines a reactive value `person_rct` that we use to create the table. \nThe `set_person` function returned by the module server is used by the calling module\nto supply the person data (see the next section).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntableWithIconsUI <- function(id) {\n  ns <- shiny::NS(id)\n  shiny::tagList(\n    shiny::uiOutput(ns(\"tab\"))\n  )\n}\n\ntableWithIconsServer <- function(id) {\n  shiny::moduleServer(\n    id,\n    function(input, output, session) {\n      \n      person_rct <- shiny::reactiveVal()\n      \n      output$tab <- shiny::renderUI({\n        make_table_w_icons(person_list = person_rct())\n      })\n      \n      return(list(\n        set_person = function(x) {\n          person_rct(x)\n        }\n        \n      ))\n    }\n  )\n}\n```\n:::\n\n\n\n\n\n## Shiny app\n\nFor our application, we define another person (Jessica) and let the user choose\na person with a `selectInput`. Then the server observes this input, indexes the\n`person_list` data object, and passes the person data list to the `tableWithIcons`\nmodule.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\njaime <-\n  list(\n    Name = list(text = \"Jaime\", icon = \"user\"),\n    Position = list(text = \"Researcher\", icon = \"flask\"),\n    Twitter = list(text = \"Jaime123\", icon = \"twitter\"),\n    Hobby = list(text = \"Football\", icon = \"futbol\")\n  )\n\njessica <- list(\n  Name = list(text = \"Jessica\", icon = \"user\"),\n  Position = list(text = \"Researcher\", icon = \"flask\"),\n  Twitter = list(text = \"IamJessica\", icon = \"twitter\"),\n  Hobby = list(text = \"Fishing\", icon = \"fish\")\n)\n\npersons_data <- list(\n  Jaime = jaime,\n  Jessica = jessica\n)\n\nui <- fluidPage(\n  selectInput(\n    inputId = \"person\",\n    label = \"Person\",\n    choices = c(\"Jaime\", \"Jessica\")\n  ),\n  tableWithIconsUI(id = \"tab1\")\n)\n\nserver <- function(input, output, session) {\n  tab1 <- tableWithIconsServer(id = \"tab1\")\n  \n  shiny::observeEvent(input$person, {\n    person_data <- person_list[[input$person]]\n    tab1$set_person(person_data)\n  })\n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n\n\n\n## Creating an icon set\n\nIf you followed along and run the code, you'll probably be able to run the application\nwithout errors. However, if we were to deploy such an application, we would get an error\nbecause by default, our deployment would only install the `{icons}` package, but not\nalso download the required icon set. We could include a `download_fontawesome`\nin our `server` or `global` file, but that would mean downloading the icons on every\ndeployment or session start, neither of which is desirable.\n\nThe solution is to create an icon set and store that as an asset to our application. \nThen we would deploy this asset with our application, and instead of downloading the \nfull set of icons, we would only load the SVGs for the icons we use in our application.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneeded_icons <- c(lapply(persons_data$Jaime, \"[[\", \"icon\"),\n                  lapply(persons_data$Jessica, \"[[\", \"icon\")\n                  )\nneeded_icons <- unique(needed_icons)\n# requires that folder `icons` exists!\nicons::icon_save(icons = needed_icons, path = \"./icons\")\n```\n:::\n\n\n\n\n\nIf we had a `{golem}` application the `icons` folder might be placed in `inst`. \nIn a `rhino` application setup, we would put this icon set in `static`.\n\nEither way, we would need to load the icon set on application start with:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napp_icons <- icons::icon_set(\"path/to/icons\")\n```\n:::\n\n\n\n\n\n# Summary\n\nIn this post we went through a simple workflow for creating HTML tables with icons\nto display small-scale, heterogenous data that are not suitable for charting and \ndon't require interactive table widgets. We also saw how to use this type of visualization\nin a `{shiny}` application and how to include only a subset of required icons as\nresources for our web application.\n\n# Gist\n\nThe full code for the working application is available as a gist below:\n\n<script src=\"https://gist.github.com/teofiln/f87c29ad872075270d7357eba1d31205.js\"></script>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}